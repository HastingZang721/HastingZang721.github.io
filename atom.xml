<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>臧正功 $blog</title>
  
  <subtitle>Happy Endings&amp;万事胜意</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-23T03:15:37.786Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>臧正功</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STL七大容器</title>
    <link href="http://yoursite.com/2019/06/23/STL/"/>
    <id>http://yoursite.com/2019/06/23/STL/</id>
    <published>2019-06-23T03:05:53.436Z</published>
    <updated>2019-06-23T03:15:37.786Z</updated>
    
    <content type="html"><![CDATA[<p>STL是Standard Template Library的简称，中文名标准模板库；<br>从根本上说，STL是一些“容器”的集合，这些“容器”有list,vector,set,map等;<br>C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。<a id="more"></a> </p><h4 id="1）组成部分"><a href="#1）组成部分" class="headerlink" title="1）组成部分"></a>1）组成部分</h4><p>STL分为六大组件：<br>| <strong>容器(container)</strong> | 常用数据结构。大致分为两类，<strong>序列容器</strong>，如vector，list，deque，<strong>关联容器</strong>，如set，map。在实现上，是类模板(class template) |<br>| <strong>迭代器(iterator)</strong> | 一套访问容器的接口，行为类似于<strong>指针</strong>。它为不同算法提供的相对统一的容器访问方式 |<br>|<strong>算法(algorithm)</strong>  |  提供一套常用的算法，如sort，search，copy，erase … 在实现上，可以认为是一种函数模板(function template)。|<br>| 配置器(allocator) | 为容器提供空间配置和释放，对象构造和析构的服务，也是一个class template。 |<br>| 配接器(adapter) | 将一种容器修饰为功能不同的另一种容器，如以容器vector为基础，在其上实现stack，stack的行为也是一种容器。这就是一种配接器。 |<br>| 仿函数(functor) |作为函数使用的对象，用于泛化算法中的操作  |</p><p><img src="https://i.bmp.ovh/imgs/2019/06/9b66cae550a5b339.jpg" alt></p><h4 id="2-七大容器"><a href="#2-七大容器" class="headerlink" title="2)七大容器"></a>2)七大容器</h4><h6 id="2-1）序列式容器"><a href="#2-1）序列式容器" class="headerlink" title="2.1）序列式容器"></a>2.1）序列式容器</h6><blockquote><p>向量(vector) 连续存储的元素<vector></vector></p></blockquote><ul><li>front()返回头部元素的引用，可以当左值</li><li>back()返回尾部元素的引用，可以当左值</li><li>push_back()添加元素，只能尾部添加</li><li>pop_back()移除元素，只能在尾部移除</li><li> erase(iterator)函数，删除后会返回当前迭代器的下一个位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">//string提供了成员函数c_str来将string对象转化成const char *</span><br><span class="line">    </span><br><span class="line">    //定义一个vector容器</span><br><span class="line">    vector&lt;int&gt; v1;</span><br><span class="line">    </span><br><span class="line">    //插入元素(尾部插入)</span><br><span class="line">    v1.push_back(1);</span><br><span class="line">    v1.push_back(2);</span><br><span class="line">    v1.push_back(3);</span><br><span class="line">    </span><br><span class="line">    //迭代器遍历打印</span><br><span class="line">    for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    //修改头部元素的值(front()返回是引用，可以当左值)</span><br><span class="line">    v1.front() = 44;</span><br><span class="line">    </span><br><span class="line">    //输出头部元素</span><br><span class="line">    cout&lt;&lt; &quot;头部元素:&quot; &lt;&lt; v1.front() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    //修改尾部的值(back()返回是引用，可以当左值)</span><br><span class="line">    v1.back() = 99;</span><br><span class="line">    </span><br><span class="line">    //输出尾部元素</span><br><span class="line">    cout &lt;&lt; &quot;尾部元素&quot; &lt;&lt; v1.back() &lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    //删除元素(从尾部删除)</span><br><span class="line">    v1.pop_back();</span><br><span class="line"></span><br><span class="line"> //2 区间删除</span><br><span class="line">    //--2.1 删除前3个元素</span><br><span class="line">    v1.erase(v1.begin(), v1.begin() + 3);</span><br><span class="line">    </span><br><span class="line">    //--2.2 删除指定位置的元素</span><br><span class="line">    v1.erase(v1.begin() +3);</span><br><span class="line">    </span><br><span class="line">    //迭代器遍历打印</span><br><span class="line">    for (vector&lt;int&gt;::iterator it = v1.begin(); it != v1.end(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>列表(list) 由节点组成的双向链表，每个结点包含着一个元素<list></list></p></blockquote><blockquote><p>双端队列(deque) 连续存储的指向不同元素的指针所组成的数组<deque></deque></p></blockquote><ul><li>push_back 从尾部插入元素</li><li>push_front 从头部插入元素</li><li>pop_back 从尾部删除元素</li><li>pop_front 从头部删除元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    </span><br><span class="line">    //定义deque对象</span><br><span class="line">    deque&lt;int&gt; d1;</span><br><span class="line">    </span><br><span class="line">    //尾部插入元素</span><br><span class="line">    d1.push_back(10);</span><br><span class="line">    d1.push_back(20);</span><br><span class="line">    d1.push_back(30);</span><br><span class="line">    </span><br><span class="line">    //头部插入元素</span><br><span class="line">    d1.push_front(1);</span><br><span class="line">    d1.push_front(2);</span><br><span class="line">    d1.push_front(3);</span><br><span class="line">    </span><br><span class="line">    //尾部删除元素</span><br><span class="line">    d1.pop_back();</span><br><span class="line">    </span><br><span class="line">    //头部删除元素</span><br><span class="line">    d1.pop_front();</span><br><span class="line">    </span><br><span class="line">    //修改头部和尾部的值</span><br><span class="line">    d1.front() = 111;</span><br><span class="line">    d1.back()  = 222;</span><br><span class="line">    </span><br><span class="line">    //查找元素为1的下标</span><br><span class="line">    //通过distance求取下标</span><br><span class="line">    deque&lt;int&gt;::iterator it = d1.begin();</span><br><span class="line">    while (it != d1.end()) &#123;</span><br><span class="line">        if (*it == 1) &#123;</span><br><span class="line">            cout &lt;&lt; &quot;下标：&quot; &lt;&lt; distance(d1.begin(), it) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        it++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //遍历</span><br><span class="line">    for (deque&lt;int&gt;::iterator it = d1.begin(); it != d1.end(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>相关案例请-&gt;《<strong>转4.2)Deque两端队列操作案例</strong>》</p><h6 id="2-2）关联式容器"><a href="#2-2）关联式容器" class="headerlink" title="2.2）关联式容器"></a>2.2）关联式容器</h6><blockquote><p>集合(set) 由节点组成的红黑树，每个节点都包含着一个元素，节点之间以某种作用于元素队的谓词排列，没有两个不同的元素能够拥有相同的次序 <set>;<br>多重集合(multiset) 允许存在两个次序相等的元素的集合 <set></set></set></p></blockquote><p>C++的set容器，其中包含的元素是唯一的，而且是有序的。<br>C++的set容器，是按照顺序插入的，不能在指定位置插入。<br>C++的set容器，其结构是红黑二叉树，插入数据的效率比vector快<a href="https://blog.csdn.net/Lyt15829797751/article/details/81054920" target="_blank" rel="noopener">红黑树的插入过程（图解）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">////set 集合 ；元素不可重复</span><br><span class="line">//// /multiset 多重集合；元素可重复</span><br><span class="line">////set 常用API</span><br><span class="line">//</span><br><span class="line">//void test1()&#123;</span><br><span class="line">//    set&lt;int &gt;a;</span><br><span class="line">//    a.insert(1);</span><br><span class="line">//    a.insert(4);</span><br><span class="line">//    a.insert(2);</span><br><span class="line">//    for(set&lt;int&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">//    &#123;</span><br><span class="line">//        cout&lt;&lt;(*it)&lt;&lt;endl;</span><br><span class="line">//</span><br><span class="line">//    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>映射(map) 由{键，值}对组成的集合，以某种作用于键对上的谓词排列 <map><br>多重映射(multimap) 允许键对有相等的次序的映射 <map></map></map></p></blockquote><p>map和multimap是一个键值映射的容器。map中的键值对都是唯一的，但是multimap中一个键可以对应多个值。</p><p>map和multimap是关联式容器，键值成对存在<br>map和multimap是红黑变体的平衡二叉树结构<br>map只支持唯一的键值对，集合中的元素是按照一定的顺序排列的<br>multimap中的键可以出现多次<br>map和multimap的元素插入过程是按照顺序插入的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//////////二元关联容器</span><br><span class="line">/*</span><br><span class="line"> * map 映射：类字典</span><br><span class="line"> *</span><br><span class="line"> * multimap 多重映射</span><br><span class="line"> * pair&lt;键类型，附加数据类型&gt;</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">//5门课程 每门都有相应的学分，从中选择3门，输出学分总和</span><br><span class="line">int main()&#123;</span><br><span class="line">    map&lt;string,int&gt;courses;</span><br><span class="line">    //将课程信息插入courses 映射中</span><br><span class="line"></span><br><span class="line">    courses.insert(make_pair(&quot;csapp&quot;,3));</span><br><span class="line">    courses.insert(make_pair(&quot;math&quot;,4));</span><br><span class="line">    courses.insert(make_pair(&quot;chinese&quot;,2));</span><br><span class="line">    courses.insert(make_pair(&quot;english&quot;,2));</span><br><span class="line">    courses.insert(make_pair(&quot;os&quot;,5));</span><br><span class="line"></span><br><span class="line">    int n=3;</span><br><span class="line">    int sum=0;</span><br><span class="line">    while(n&gt;0)&#123;</span><br><span class="line">        string name;</span><br><span class="line">        cin&gt;&gt;name;</span><br><span class="line">        map&lt;string ,int&gt;::iterator it=courses.find(name);//查找课程map提供了两个函数进行key的查找：find和equal_range。</span><br><span class="line">        if(it==courses.end())</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;name&lt;&lt;&quot;is not available&quot;&lt;&lt;endl;</span><br><span class="line">      &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            sum+=it-&gt;second;//累计学分</span><br><span class="line">            courses.erase(it);//将刚才选过的课程从map 中删除</span><br><span class="line">            n--;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;cout&lt;&lt;&quot;total credit&quot;&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-案例代码"><a href="#4-案例代码" class="headerlink" title="4) 案例代码"></a>4) 案例代码</h4><h6 id="4-1）容器迭代器算法分离示例"><a href="#4-1）容器迭代器算法分离示例" class="headerlink" title="4.1）容器迭代器算法分离示例"></a>4.1）容器迭代器算法分离示例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;iterator&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//STL</span><br><span class="line">//standard Template library</span><br><span class="line">//数据结构与算法分离</span><br><span class="line">//容器：序列 关联</span><br><span class="line">//迭代器： 相当于指针，实际上迭代器是一个类，封装成一个指针</span><br><span class="line">//算法：通过有限的步骤解决问题</span><br><span class="line"></span><br><span class="line">//int mycount(int* start,int* end,int val)&#123;//算法，负责统计元素的个数</span><br><span class="line">//    int num=0;</span><br><span class="line">//    while(start!=end)</span><br><span class="line">//    &#123;</span><br><span class="line">//        if(*start==val)</span><br><span class="line">//        &#123;num++;&#125;</span><br><span class="line">//        start++;</span><br><span class="line"></span><br><span class="line">//    &#125;</span><br><span class="line">//    return num;</span><br><span class="line"></span><br><span class="line">//&#125;</span><br><span class="line">//</span><br><span class="line">//int main()&#123;</span><br><span class="line">//    //数组  容器</span><br><span class="line">//    int arr[]=&#123;0,7,4,2,1,5,7,34,1&#125;;</span><br><span class="line">//    int* pbegin=arr;//指向第一个元素的其位置</span><br><span class="line">//    int* pend=&amp;(arr[sizeof(arr)/sizeof(int)]);//指向迭代器最后一个元素的下一个位置</span><br><span class="line">//    int number=mycount(pbegin,pend,1);</span><br><span class="line">//    cout&lt;&lt;number&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">//&#125;</span><br><span class="line">///////////////------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//STL 基本语法</span><br><span class="line">//void PrintVector(int v)&#123;</span><br><span class="line">//</span><br><span class="line">//    cout&lt;&lt;v;</span><br><span class="line">//&#125;</span><br><span class="line">//</span><br><span class="line">//void test1()&#123;</span><br><span class="line">//    vector&lt;int &gt;v;//定义一个容器，且指定这个容器存放的数据类型是int</span><br><span class="line">//    v.push_back(10);</span><br><span class="line">//    v.push_back(20);</span><br><span class="line">//    v.push_back(40);</span><br><span class="line">//</span><br><span class="line">//    //vector&lt;int&gt;::iterator 迭代器类型</span><br><span class="line">//</span><br><span class="line">//    vector&lt;int &gt;::iterator pBegin=v.begin();</span><br><span class="line">//    vector&lt;int &gt;::iterator pEnd=v.end();</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">//    //容器提供的迭代其for_each算法</span><br><span class="line">//</span><br><span class="line">//    for_each(pBegin,pEnd,PrintVector);</span><br><span class="line">//</span><br><span class="line">//&#125;</span><br><span class="line">//容器也可以存放自定义的数据类型</span><br><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">public:</span><br><span class="line">    Person(int age,int id):age(age),id(id)&#123;&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int age;</span><br><span class="line">    int id ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void PrintVector(Person v)&#123;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;v.id&lt;&lt;&quot; &quot;&lt;&lt;v.age&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int test2()&#123;</span><br><span class="line">    vector&lt;Person&gt;v;</span><br><span class="line">    Person p1(10,20),p2(2,40);</span><br><span class="line">    v.push_back(p1);</span><br><span class="line">    v.push_back(p2);</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">//    for(vector&lt;Person&gt;::iterator it=v.begin();it!=v.end();it++)</span><br><span class="line">//    &#123;</span><br><span class="line">//        cout&lt;&lt;(*it).age&lt;&lt;&quot; &quot;&lt;&lt;(*it).id&lt;&lt;endl;</span><br><span class="line">//</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;Person &gt;::iterator pBegin=v.begin();</span><br><span class="line">    vector&lt;Person &gt;::iterator pEnd=v.end();</span><br><span class="line">    for_each(pBegin,pEnd,PrintVector);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;//容器中存放Person类行的指针，并且打印for_each或者迭代器方式进行打印</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    //test1();</span><br><span class="line">    test2();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>迭代器其实可以看作是一个字符的指针，上例子中vector<person>::iterator = str.begin()就是定义一个Person类型的迭代器，指向str的第一次位置。*it就表示当前的字符。注意str.end()表示字符串最后一个字符的后面一个位置。如果it == str.end()就表示已经遍历到终点了。</person></p></blockquote><h6 id="4-2-Deque两端队列操作案例"><a href="#4-2-Deque两端队列操作案例" class="headerlink" title="4.2)Deque两端队列操作案例"></a>4.2)Deque两端队列操作案例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">//deque 容器 两端队列</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 相比于vector deque是双口，可以在两端插入和删除，</span><br><span class="line"> * front（）/back（）：返回的是元素</span><br><span class="line"> * begin（）/end():返回的是迭代器</span><br><span class="line"> * 常有的API</span><br><span class="line"> */</span><br><span class="line">//初始化</span><br><span class="line">//void test1()&#123;</span><br><span class="line">//    deque&lt;int &gt;d1;</span><br><span class="line">//    deque&lt;int &gt;d2(10,5);</span><br><span class="line">//    deque&lt;int &gt;d3(d2.begin(),d2.end());</span><br><span class="line">//    deque&lt;int &gt;d4(d3);</span><br><span class="line">//    d4.push_back(100);</span><br><span class="line">//    d4.push_front(100);</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">//    for(deque&lt;int &gt;::iterator it=d4.begin();it!=d4.end();it++)</span><br><span class="line">//    &#123;</span><br><span class="line">//        cout&lt;&lt;*it&lt;&lt;&quot; &quot;;</span><br><span class="line">//    &#125;</span><br><span class="line">//    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">//&#125;</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">//int main()&#123;</span><br><span class="line">//    test1();</span><br><span class="line">//    return 0;</span><br><span class="line">//</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">//评委打分案例</span><br><span class="line">//创建5个选手，10个评委对5个选手进行打分</span><br><span class="line">//得分规则是：去掉最高和最低，取平均分</span><br><span class="line">//按照得分对5名选手进行排名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Player&#123;</span><br><span class="line">public:</span><br><span class="line">    //Player(string  name,int score)&#123;this-&gt;mName=name;this-&gt;mScore=score;&#125;</span><br><span class="line">    Player(string name,int score):mName(name),mScore(score)&#123;&#125;</span><br><span class="line">public:</span><br><span class="line">    string  mName;</span><br><span class="line">    int mScore;</span><br><span class="line">&#125;;</span><br><span class="line">//创建选手</span><br><span class="line">void CreatePlayer(vector&lt;Player&gt;&amp; v)&#123;</span><br><span class="line">    string nameSeed=&quot;ABCDE&quot;;</span><br><span class="line">    for(int i=0;i&lt;5;i++)&#123;</span><br><span class="line">        Player p;</span><br><span class="line">        p.mName=&quot;选手&quot;;</span><br><span class="line">        p.mName+=nameSeed[i];</span><br><span class="line">        p.mScore=0;</span><br><span class="line">        v.push_back(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//打分</span><br><span class="line"></span><br><span class="line">void Set_score(vector&lt;Player&gt;&amp;v)&#123;</span><br><span class="line">    for(vector&lt;Player&gt;::iterator it=v.begin();it!=v.end();it++)//遍历选手</span><br><span class="line"></span><br><span class="line">    &#123;//打分</span><br><span class="line">        deque&lt;int&gt;dScore;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int score=rand() %41+60;//[60,100)</span><br><span class="line">            dScore.push_back(score);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //对分数排序,调用ALg.默认使用的是从小到大</span><br><span class="line">        sort(dScore.begin(),dScore.end());</span><br><span class="line">        //去除最高分和最低分</span><br><span class="line"></span><br><span class="line">        dScore.pop_back();</span><br><span class="line">        dScore.pop_front();</span><br><span class="line"></span><br><span class="line">        //求平jun分</span><br><span class="line">        int sumScore=0;</span><br><span class="line">        for(deque&lt;int&gt;::iterator dit=dScore.begin();dit!=dScore.end();dit++)</span><br><span class="line">        &#123;</span><br><span class="line">            sumScore+=(*dit);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        int avg=sumScore/dScore.size();</span><br><span class="line"></span><br><span class="line">        //保存分数</span><br><span class="line">        (*it).mScore=avg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//根据分数排序</span><br><span class="line">void PrintRank(vector&lt;Player&gt;&amp;v)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(),v.end());</span><br><span class="line">    for(vector&lt;Player&gt;::iterator it=v.begin();it!=v.end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;姓名：  &quot;&lt;&lt;(*it).mName&lt;&lt;&quot;得分&quot;&lt;&lt;(*it).mScore&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    vector&lt;Player&gt; vPlist;</span><br><span class="line"></span><br><span class="line">    CreatePlayer(vPlist);</span><br><span class="line">    Set_score(vPlist);</span><br><span class="line">    PrintRank(vPlist);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-备注"><a href="#5-备注" class="headerlink" title="5)备注"></a>5)备注</h4><p>C++ STL 之 vector 的 capacity 和 size 属性区别<br>size 是当前 vector 容器真实占用的大小，也就是容器当前拥有多少个容器。<br>capacity 是指在发生 realloc 前能允许的最大元素数，即预分配的内存空间。<br>当然，这两个属性分别对应两个方法：resize() 和 reserve()。<br>使用 resize() 容器内的对象内存空间是真正存在的。<br>使用 reserve() 仅仅只是修改了 capacity 的值，容器内的对象并没有真实的内存空间.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;STL是Standard Template Library的简称，中文名标准模板库；&lt;br&gt;从根本上说，STL是一些“容器”的集合，这些“容器”有list,vector,set,map等;&lt;br&gt;C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>博文新旧电脑迁移</title>
    <link href="http://yoursite.com/2019/06/16/%E5%8D%9A%E6%96%87%E6%96%B0%E6%97%A7%E7%94%B5%E8%84%91%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2019/06/16/博文新旧电脑迁移/</id>
    <published>2019-06-16T03:16:36.815Z</published>
    <updated>2019-06-16T03:16:36.815Z</updated>
    
    <content type="html"><![CDATA[<pre><code>备注：因近日原电脑本地文件转移至个人新电脑更博，原2018/10-2019/6的所有博文日期系统默认时间均变为2019/6/16，故阅读时会多有不便，抱歉带来困扰；</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;备注：
因近日原电脑本地文件转移至个人新电脑更博，原2018/10-2019/6的所有博文日期系统默认时间均变为2019/6/16，故阅读时会多有不便，抱歉带来困扰；
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="Life perception" scheme="http://yoursite.com/categories/Life-perception/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>详解二叉排序树（Binary Sort Tree)的删除操作</title>
    <link href="http://yoursite.com/2019/06/16/BSTDELETE/"/>
    <id>http://yoursite.com/2019/06/16/BSTDELETE/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2019-05-31T08:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般构造二叉排序树的<strong>目的</strong>是为了提高查找与删除关键字的速度，而删除操作较为复杂，故今日复盘之;<a id="more"></a> </p><h4 id="一）二叉树的性质"><a href="#一）二叉树的性质" class="headerlink" title="一）二叉树的性质"></a>一）二叉树的性质</h4><p>二叉搜索树又被称为二叉排序树，那么它本身也是一棵二叉树，那么满足以下性质的二叉树就是二叉搜索树：<br><img src="https://i.loli.net/2019/05/31/5cf0e6b60993617126.png" alt="随手画勿喷"></p><ol><li>若左子树不为空，则左子树上左右节点的值都小于根节点的值;</li><li>若它的右子树不为空，则它的右子树上所有的节点的值都大于根节点的值;</li><li>它的左右子树也要分别是二叉搜索树; </li></ol><h4 id="二）删除操作的三种情况"><a href="#二）删除操作的三种情况" class="headerlink" title="二）删除操作的三种情况"></a>二）删除操作的三种情况</h4><ul><li><p>待删除节点无孩子节点<br><img src="https://i.loli.net/2019/05/31/5cf0e6b6221c661851.png" alt="在这里插入图片描述"></p><blockquote><p>此时即叶子结点；（很容易实现删除操作，直接删除结点即可）</p></blockquote></li><li><p>待删除节点只有一个孩子节点<br><img src="https://i.loli.net/2019/05/31/5cf0e6b63011040785.png" alt></p><blockquote><p>删除结点后，将它的左子树或者右子树整个移动到删除结点的位置<br><img src="https://i.loli.net/2019/05/31/5cf0e6b63418513600.png" alt></p></blockquote></li><li>待删除节点有两个孩子节点<br><img src="https://i.loli.net/2019/05/31/5cf0e6b635c1523051.png" alt><blockquote><p>找到待删除节点左子树的最右孩子（或者右子树的最左孩子）来替代待删除节点的位置<br><img src="https://i.loli.net/2019/05/31/5cf0e6b636da255030.png" alt></p></blockquote></li></ul><p>因为本题我随手画的 ，所以二叉排序树情况简单，两种情况复杂度相同的，但遇到个别情况还是要因题而异；</p><h4 id="三）二叉排序树的删除操作代码实现"><a href="#三）二叉排序树的删除操作代码实现" class="headerlink" title="三）二叉排序树的删除操作代码实现"></a>三）二叉排序树的删除操作代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">int delete_node(node *root,double a)&#123;</span><br><span class="line">    node *p=root;</span><br><span class="line">    if(search_value(*root,a,&amp;p)==1)&#123;</span><br><span class="line">        //已经存在a</span><br><span class="line">        //开始删除。p指向要删除节点的父节点</span><br><span class="line">        node q=null;//q指向要删除的节点</span><br><span class="line">        if(a&lt; p-&gt;data)&#123;</span><br><span class="line">            q=p-&gt;lchild;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            q=p-&gt;rchild;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        if (q-&gt;Lchild==null&amp;&amp;q-&gt;rchild==null)//若q是叶子节点则直接删除&#123;&#125;</span><br><span class="line">        &#123;</span><br><span class="line">            if (a &lt; p-&gt;data)//a是p的左节点</span><br><span class="line">                p-&gt;lchild == null;</span><br><span class="line">            else</span><br><span class="line">                p-&gt;rchild == null;</span><br><span class="line">        &#125;</span><br><span class="line">        else if((p-&gt;lchild==null&amp;&amp;p-&gt;rchild!=null)||(p-&gt;lchild!=null&amp;&amp;p-&gt;rchild==null))&#123;</span><br><span class="line">            //只有左子树或者只有右子树</span><br><span class="line">            node r=(q-&gt;lchild=null?q-&gt;rchild:q-&gt;lchild);//指向不为空的子树</span><br><span class="line">            if(a&lt;p-&gt;lchild)//a 是p 的左子树节点</span><br><span class="line">                p-&gt;lchild=r;</span><br><span class="line">            else</span><br><span class="line">                p-&gt;rchild=r;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;//q既有左子树也有右子树</span><br><span class="line">            //这里选择左子树上最大的节点作为替代p的节点（新的父节点）</span><br><span class="line">            node r=q-&gt;lchild;</span><br><span class="line">            if(r-&gt;rchild==null)&#123;//判断r de lchild 是否为空</span><br><span class="line">                p-&gt;lchild=r;</span><br><span class="line">                r-&gt;lchild=q-&gt;lchild;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;//右子树不为空</span><br><span class="line">                node r1;</span><br><span class="line">                node r1_father;</span><br><span class="line">                while(r1-&gt;rchild!=NULL)&#123;</span><br><span class="line">                    r1_father=r1;</span><br><span class="line">                    r1=r1-&gt;rchild;</span><br><span class="line"></span><br><span class="line">                &#125;r1_father-&gt;rchild=r1-&gt;lchild;</span><br><span class="line">                r1-&gt;lchild=r;</span><br><span class="line">                r1=p-&gt;rchild;</span><br><span class="line">                r1-&gt;rchild=q-&gt;rchild;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        free(q);</span><br><span class="line">        q=null;</span><br><span class="line">        return 0;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return 1;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于代码的测试可以通过中序遍历二叉排序树，检查结果是从小到大输出。</p></blockquote><h4 id="四）备忘录"><a href="#四）备忘录" class="headerlink" title="四）备忘录"></a>四）备忘录</h4><p>关于二叉排序树的查询和插入操作代码也同步在<a href="https://github.com/HastingZang721/ProjectCode/blob/master/Data_Structure/BinarySortTree.cpp" target="_blank" rel="noopener">MyProjectCode</a><br>欢迎大家指正和建议；<br>同时也感谢网络开源的学习资源，路漫漫其修远兮一起加油吧；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般构造二叉排序树的&lt;strong&gt;目的&lt;/strong&gt;是为了提高查找与删除关键字的速度，而删除操作较为复杂，故今日复盘之;
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="Data_structure" scheme="http://yoursite.com/tags/Data-structure/"/>
    
  </entry>
  
  <entry>
    <title>从B/B+树来了解Mysql索引背后的数据结构</title>
    <link href="http://yoursite.com/2019/06/16/BTree/"/>
    <id>http://yoursite.com/2019/06/16/BTree/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2019-06-16T01:43:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在复习数据库知识中想要了解Mysql的查询原理，顺便复习<a href="https://item.jd.com/40247188822.html" target="_blank" rel="noopener">算法导论第18章</a>内容，故复盘之；<a id="more"></a> </p><h4 id="1）索引"><a href="#1）索引" class="headerlink" title="1）索引"></a>1）索引</h4><blockquote><p>索引是对数据库表中一列或多列的值进行排序的一种数据结构。<br>索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录</p></blockquote><p>目前Mysql目前主要有以下几种索引类型：<strong>FULLTEXT，HASH，BTREE，RTREE</strong><br>其中<strong>BTREE</strong>索引就是一种将索引值按一定的算法，存入一个树形的数据结构中，每次查询都是从树的入口root开始，依次遍历node，获取leaf。这是MySQL里默认和最常用的索引类型。</p><hr><h4 id="2）数据结构与算法"><a href="#2）数据结构与算法" class="headerlink" title="2）数据结构与算法"></a>2）数据结构与算法</h4><h6 id="2-1）B树的定义"><a href="#2-1）B树的定义" class="headerlink" title="2.1）B树的定义"></a>2.1）B树的定义</h6><p><a href="https://i.loli.net/2019/06/14/5d035c6b480a756567.jpg" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/14/5d035c6b480a756567.jpg" alt="B树"></a><br>根为T.root</p><p>A)每个节点x 有如下性质：</p><ol><li>x.n：表示当前存储在节点x的关键字个数；</li><li>x .n个关键字本身x.key<sub>1</sub>,x.key<sub>2</sub>,…x.key<sub>x.n</sub>，以非降序存放；</li><li>x.leaf==true 表示x是叶子节点，反之 false；</li><li>每个内部节点x有n+1个指向孩子的指针</li></ol><p>B)每个关键字x.key<sub>i</sub>对存储在各个子树的关键字范围加以分割；<br>C)每个叶节点具有相同的深度，即树的高度H;<br>D)每个节点所包含的关键字个数有上界和下界。用一个被称为B树的最小度数t&gt;=2来表示这些界；(图中t=3)</p><blockquote><p>注意：B树上绝大多数操作所需的磁盘存取次数与B树的高度H成正比</p></blockquote><h6 id="2-2）B-树的定义"><a href="#2-2）B-树的定义" class="headerlink" title="2.2）B+树的定义"></a>2.2）B+树的定义</h6><p><a href="https://i.loli.net/2019/06/14/5d035ca88259967625.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/06/14/5d035ca88259967625.png" alt="B+.png"></a><br>B+树作为B树的一种变形树，它与B树的差异在于：</p><ul><li>有k个子结点的结点必然有k个关键码；</li><li>内节点不存储data，只存储key；</li><li>叶子节点不存储指针；<br>非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。</li><li><p>树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录。</p><p>如图所示，在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的B+Tree。做这个优化的目的是为了提高区间访问的性能，例如果要查询key为从8到92的所有数据记录，当找到8后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率</p></li></ul><hr><h4 id="3）原理分析"><a href="#3）原理分析" class="headerlink" title="3）原理分析"></a>3）原理分析</h4><blockquote><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级;<br>所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。<br>换句话说，索引的结构组织要尽量<strong>减少</strong>查找过程中磁盘I/O的存取次数</p></blockquote><h6 id="3-1）主存存储原理"><a href="#3-1）主存存储原理" class="headerlink" title="3.1）主存存储原理"></a>3.1）主存存储原理</h6><p><img src="https://i.loli.net/2019/06/14/5d03a88f97cf984310.png" alt="1.png"><br>从抽象角度看，主存是一系列的存储单元组成的矩阵，每个存储单元存储固定大小的数据。每个存储单元有唯一的地址，现代主存的编址规则比较复杂，这里将其简化成一个二维地址：通过一个行地址和一个列地址可以唯一定位到一个存储单元。</p><p>主存的存取过程如下：</p><blockquote><p>当系统需要读取主存时，则将地址信号放到地址总线上传给主存，主存读到地址信号后，解析信号并定位到指定存储单元，然后将此存储单元数据放到数据总线上，供其它部件读取。</p></blockquote><blockquote><p>写主存的过程类似，系统将要写入单元地址和数据分别放在地址总线和数据总线上，主存读取两个总线的内容，做相应的写操作。</p></blockquote><p>主存存取的时间仅与存取次数呈线性关系，因为不存在机械操作，两次存取的数据的“距离”不会对时间有任何影响，</p><h6 id="3-2）磁盘存储原理"><a href="#3-2）磁盘存储原理" class="headerlink" title="3.2）磁盘存储原理"></a>3.2）磁盘存储原理</h6><p><img src="https://i.loli.net/2019/06/14/5d03a88f9e1fc80747.jpeg" alt="2.jpeg"><br>与主存不同，磁盘I/O存在机械运动耗费，因此磁盘I/O的时间消耗是巨大的。<br>盘片被划分成一系列同心环，圆心是盘片中心，每个同心环叫做一个磁道，所有半径相同的磁道组成一个柱面。磁道被沿半径线划分成一个个小的段，每个段叫做一个扇区，每个扇区是磁盘的最小存储单元。为了简单起见，我们下面假设磁盘只有一个盘片和一个磁头。</p><blockquote><p>当需要从磁盘读取数据时，系统会将数据逻辑地址传给磁盘，磁盘的控制电路按照寻址逻辑将逻辑地址翻译成物理地址，即确定要读的数据在哪个磁道，哪个扇区。为了读取这个扇区的数据，需要将磁头放到这个扇区上方，为了实现这一点，磁头需要移动对准相应磁道，这个过程叫做寻道，所耗费时间叫做寻道时间，然后磁盘旋转将目标扇区旋转到磁头下，这个过程耗费的时间叫做旋转时间</p></blockquote><h6 id="3-3-局部性原理与磁盘预读"><a href="#3-3-局部性原理与磁盘预读" class="headerlink" title="3.3)局部性原理与磁盘预读"></a>3.3)局部性原理与磁盘预读</h6><ul><li>由于存储介质的特性，磁盘本身存取就比主存慢很多;</li><li>机械运动耗费;<br>因此为了提高效率，要尽量减少磁盘I/O，减少读写操作。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会<strong>预读</strong>，<br>即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的<strong>局部性原</strong>理：</li></ul><p><strong><em>当一个数据被用到时，其附近的数据也通常会马上被使用。</em></strong></p><p>程序运行期间所需要的数据通常比较集中。</p><p>由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I/O效率。</p><p>预读的长度一般为页（page）的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。</p><p>文件系统及数据库系统的设计者利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：</p><blockquote><p>每次新建一个节点的同时，直接申请一个页的空间( 512或者1024)，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。如，将B树的度t设置为1024</p></blockquote><hr><h4 id="4-证明"><a href="#4-证明" class="headerlink" title="4)证明"></a>4)证明</h4><p>依据算法导论18章知识，分析B树最坏情况下的高度：</p><blockquote><p>定理： 如果n&gt;=1，那么对任意一颗包含n个关键字，高度为h,最小度数t&gt;=2的B树T有：<br>                 <strong>$$h&lt;=log_t    \frac{n+1} {2}$$</strong></p></blockquote><p>证明：</p><ul><li>B树T的根至少有一个关键字，而且所有其他的节点至少包含t-1个关键字，</li><li>因此高度为h的 B树T 在深度为1的时候至少包含2个节点，在深度2时至少包含2t个节点，深度为3时至少包含$2t^2$个节点…</li><li>直到深度h至少有$2t^{h-1}$个节点</li></ul><p>$$n&gt;=1+(t-1)\sum_{i=1}^h2t^{i-1}=2t^h-1$$<br>两边取以t为底的对数即可证明定理</p><p>由此可以看出，B树相较于红黑树，对数的底可以取很大，在查询时节约lgt的因子；避免大量磁盘访问；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在复习数据库知识中想要了解Mysql的查询原理，顺便复习&lt;a href=&quot;https://item.jd.com/40247188822.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;算法导论第18章&lt;/a&gt;内容，故复盘之；
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>C+中的深复制与浅复制</title>
    <link href="http://yoursite.com/2019/06/16/C+%E6%B7%B1%E6%B5%85%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2019/06/16/C+深浅复制/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2019-05-14T10:52:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近重刷<a href="https://www.amazon.cn/dp/B01J0L7X9K/ref=sr_1_1?__mk_zh_CN=亚马逊网站&amp;keywords=郑莉+清华大学+C%2B%2B&amp;qid=1557827848&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">清华大学的C++教程郑莉版</a>看到动态分配内存这节：其实在大多数的情况下，隐含的复制构造函数足以实现对象间数据元素的一一对应复制，但并不是总适用，因为它完成的只是浅复制。所以借此例题来学习对象间的深复制与浅复制。<a id="more"></a> </p><blockquote><p>例题说明：<br>使用new动态创建Point类，并创建动态数组ArrayofPoints;在main函数中利用默认的复制构造函数建立两组完全相同的点；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cassert&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Point&#123;</span><br><span class="line">public :</span><br><span class="line">    Point() :x(0), y(0) &#123;</span><br><span class="line">    cout&lt;&lt;&quot;default Construstor called.&quot;&lt;&lt;endl;&#125;</span><br><span class="line">    Point(int x,int y):x(x),y(y)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;constructor called&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ~ Point()&#123;cout&lt;&lt;&quot;Destrustor called.&quot;&lt;&lt;endl;&#125;</span><br><span class="line">    int getX() const &#123;return x;&#125;</span><br><span class="line">    int getY() const &#123;return y;&#125;</span><br><span class="line">    void move(int newX,int newY)&#123;</span><br><span class="line">        x=newX;</span><br><span class="line">        y=newY;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    int x, y;</span><br><span class="line">&#125;;</span><br><span class="line"> class ArrayofPoints&#123; //动态数组Arrayofpoints与points类存在者使用关系</span><br><span class="line"> public:</span><br><span class="line">     ArrayofPoints (int size):size(size)</span><br><span class="line">     &#123;</span><br><span class="line">         points=new Point[size];</span><br><span class="line">     &#125;</span><br><span class="line">     ~ArrayofPoints()&#123;</span><br><span class="line">         cout&lt;&lt;&quot;Deleting···&quot;&lt;&lt;endl;</span><br><span class="line">         delete[] points;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     Point &amp;element(int index)&#123;</span><br><span class="line">         assert(index&gt;= 0&amp;&amp; index &lt;size);//</span><br><span class="line">         return points[index];</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> private:</span><br><span class="line">     Point *points;</span><br><span class="line">     int size;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int count;</span><br><span class="line">    cout&lt;&lt;&quot;please enter the count of points:&quot;;</span><br><span class="line">    cin&gt;&gt;count;</span><br><span class="line">    ArrayofPoints pointArray1(count);</span><br><span class="line">    pointArray1.element(0).move(5,10);</span><br><span class="line">    pointArray1.element(1).move(15,20);</span><br><span class="line">    ArrayofPoints pointsArray2=pointArray1;//创建副本</span><br><span class="line">    cout&lt;&lt;&quot;Copy of pointsArray1:&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;point_0 of array2:&quot;&lt;&lt;pointsArray2.element(0).getX()&lt;&lt;&quot;,&quot;&lt;&lt;pointsArray2.element(0).getY()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;point_1 of array2:&quot;&lt;&lt;pointsArray2.element(1).getX()&lt;&lt;&quot;,&quot;&lt;&lt;pointsArray2.element(1).getY()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;&quot;----------------我是可爱的分隔符--------------&quot;&lt;&lt;endl;</span><br><span class="line">    pointArray1.element(0).move(25,40);</span><br><span class="line">    pointArray1.element(1).move(35,40);</span><br><span class="line">    cout&lt;&lt; &quot;after the moving of pointsArray1&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;point_0 of array2:&quot;&lt;&lt;pointsArray2.element(0).getX()&lt;&lt;&quot;,&quot;&lt;&lt;pointsArray2.element(0).getY()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;point_1 of array2:&quot;&lt;&lt;pointsArray2.element(1).getX()&lt;&lt;&quot;,&quot;&lt;&lt;pointsArray2.element(1).getY()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">please enter the count of points:2</span><br><span class="line">default Construstor called.</span><br><span class="line">default Construstor called.</span><br><span class="line">Copy of pointsArray1:</span><br><span class="line">point_0 of array2:5,10</span><br><span class="line">point_1 of array2:15,20</span><br><span class="line">----------------我是可爱的分隔符--------------</span><br><span class="line">after the moving of pointsArray1</span><br><span class="line">point_0 of array2:25,40</span><br><span class="line">point_1 of array2:35,40</span><br><span class="line">Deleting···</span><br><span class="line">Destrustor called.</span><br><span class="line">u1(6426,0x1143ee5c0) malloc: *** error for object 0x7fce4ac02a40: pointer being freed was not allocated</span><br><span class="line">Destrustor called.</span><br><span class="line">Deleting···</span><br><span class="line">u1(6426,0x1143ee5c0) malloc: *** set a breakpoint in malloc_error_break to debug</span><br><span class="line">Destrustor called.</span><br><span class="line">Destrustor called.</span><br></pre></td></tr></table></figure></p><p>结果分析：<br>程序中ArrayofPoint2是从ArrayofPoint1复制过来的，二者的初始状态肯定是一样的。但是当程序通过move函数移动ArrayofPoint1的第一组点后，ArrayofPoint2的第二组点也被移动到相同的位置，显示同样的结果。如图1所示<br><img src="http://imgsrc.baidu.com/forum/pic/item/0b69ea19972bd407ce6f704575899e510eb309a8.jpg" alt="在这里插入图片描述"><br>有图可以看出，在使用<strong>默认构造函数</strong>将两个对象的数据简单复制后，不仅具有相同的数值，两个对象还指向同一内存地址，所以在移动ArrayofPoint1时，也影响到ArrayofPoint2。<br>并且程序结束时会将这部分空间释放两次，导致运行错误！<br>解决办法是编写复制构造函数来实现“深复制”。<br><strong>在ArrayofPoints类中添加声明一个复制拷贝函数；</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayofPoints::ArrayofPoints(const ArrayofPoints &amp;v) &#123;</span><br><span class="line">     size=v.size;</span><br><span class="line">     points=new Point[size];</span><br><span class="line">     for(int i=0;i&lt;size;i++)</span><br><span class="line">         points[i]=v.points[i];</span><br></pre></td></tr></table></figure></p><p>修改后运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">please enter the count of points:2</span><br><span class="line">default Construstor called.</span><br><span class="line">default Construstor called.</span><br><span class="line">default Construstor called.</span><br><span class="line">default Construstor called.</span><br><span class="line">Copy of pointsArray1:</span><br><span class="line">point_0 of array2:5,10</span><br><span class="line">point_1 of array2:15,20</span><br><span class="line">----------------我是可爱的分隔符--------------</span><br><span class="line">after the moving of pointsArray1</span><br><span class="line">point_0 of array2:5,10</span><br><span class="line">point_1 of array2:15,20</span><br><span class="line">Deleting···</span><br><span class="line">Destrustor called.</span><br><span class="line">Destrustor called.</span><br><span class="line">Deleting···</span><br><span class="line">Destrustor called.</span><br><span class="line">Destrustor called.</span><br></pre></td></tr></table></figure></p><p>此时深复制的效果示意图如下：<br><img src="http://imgsrc.baidu.com/forum/pic/item/d5873aca0a46f21fe273f3ebf8246b600d33ae95.jpg" alt="在这里插入图片描述"><br>最后引入看到的一个关于浅复制与深拷贝的笑话来加深大家对这部分的印象</p><blockquote><p>考试时小明抄了小红的卷子顺便把名字也抄上了，发成绩时小红的成绩单上登过两次成绩而小明甚至没有自己的成绩单，这个叫浅拷贝。<br>考试时小明抄完小红的卷子然后写了自己的名字，发成绩时各领各的成绩单，这个叫深拷贝。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近重刷&lt;a href=&quot;https://www.amazon.cn/dp/B01J0L7X9K/ref=sr_1_1?__mk_zh_CN=亚马逊网站&amp;amp;keywords=郑莉+清华大学+C%2B%2B&amp;amp;qid=1557827848&amp;amp;s=gateway&amp;amp;sr=8-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;清华大学的C++教程郑莉版&lt;/a&gt;看到动态分配内存这节：其实在大多数的情况下，隐含的复制构造函数足以实现对象间数据元素的一一对应复制，但并不是总适用，因为它完成的只是浅复制。所以借此例题来学习对象间的深复制与浅复制。
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇日志：Markdown语法学习</title>
    <link href="http://yoursite.com/2019/06/16/Markdown%20my%20first%20blog/"/>
    <id>http://yoursite.com/2019/06/16/Markdown my first blog/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2018-11-30T09:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开门大吉"><a href="#开门大吉" class="headerlink" title="开门大吉"></a>开门大吉</h3><p>我这也是王婆卖瓜 现学现卖；首先让我们来看看Markdown都有哪些优点：</p><h5 id="1-纯文本，所以兼容性极强，可以用所有文本编辑器打开。"><a href="#1-纯文本，所以兼容性极强，可以用所有文本编辑器打开。" class="headerlink" title="1) 纯文本，所以兼容性极强，可以用所有文本编辑器打开。"></a>1) 纯文本，所以兼容性极强，可以用所有文本编辑器打开。</h5><h5 id="2-让你专注于文字而不是排版。"><a href="#2-让你专注于文字而不是排版。" class="headerlink" title="2) 让你专注于文字而不是排版。"></a>2) 让你专注于文字而不是排版。</h5><h5 id="3-格式转换方便，Markdown-的文本你可以轻松转换为-html、电子书等。"><a href="#3-格式转换方便，Markdown-的文本你可以轻松转换为-html、电子书等。" class="headerlink" title="3) 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。"></a>3) 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</h5><h5 id="4-Markdown-的标记语法有极好的可读性。"><a href="#4-Markdown-的标记语法有极好的可读性。" class="headerlink" title="4) Markdown 的标记语法有极好的可读性。"></a>4) Markdown 的标记语法有极好的可读性。</h5><p>那么下面将简单介绍如何使用Markdown <a id="more"></a> </p><h2 id="（一）标题"><a href="#（一）标题" class="headerlink" title="（一）标题"></a>（一）标题</h2><p>平时我常用的的文本编辑器大多是：输入文本、选中文本、设置标题格式这样的过程。<br>而在 Markdown 中，你只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，增加 # 起到加粗的作用，标题字号相应降低。如下：</p><p> #一级标题</p><p> ##二级标题</p><p>###三级标题</p><p>####四级标题</p><p>#####五级标题</p><p>######六级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><del>好了， 看到这里你就算入门成功</del>（哈哈哈开玩笑的！介绍继续）</p><h2 id="（二）斜体"><a href="#（二）斜体" class="headerlink" title="（二）斜体"></a>（二）斜体</h2><p>效果如下：<br><em>我是斜体</em>  两边各用一颗星包裹<br> <strong>我是粗体</strong> 两边各用两颗星包裹<br> <strong><em>我是斜体加粗</em></strong> 两边各用三颗星包裹</p><h2 id="（三）列表"><a href="#（三）列表" class="headerlink" title="（三）列表"></a>（三）列表</h2><p>列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 -  例如：</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ul><li>1.文本</li><li>2.文本<br>-3. 文本<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4></li></ul><ul><li>无序列表</li></ul><h2 id="（四）-链接"><a href="#（四）-链接" class="headerlink" title="（四） 链接"></a>（四） 链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 Markdown 中，插入链接不需要其他按钮，你只需要使用格式：[链接名称](链接地址)</span><br></pre></td></tr></table></figure><p>例如                 <a href="https://www.zhihu.com/" target="_blank" rel="noopener">zhihu </a></p><h2 id="（五）图片"><a href="#（五）图片" class="headerlink" title="（五）图片"></a>（五）图片</h2><p>同样在 Markdown 中，插入图片不需要其他按钮，你只需要使用 <code>![](图片链接地址)</code>这样的语法即可，例如：<br>链接: <a href="https://baike.baidu.com/pic/%E6%9D%8E%E7%9F%A5%E6%81%A9/74308/0/8326cffc1e178a824eed4ad8fd03738da877e8f1?fr=lemma&amp;ct=single#aid=0&amp;pic=8326cffc1e178a824eed4ad8fd03738da877e8f1" target="_blank" rel="noopener">IU</a>.</p><p>图片:<br><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=ecefedb3034f78f0940692a118586130/d439b6003af33a87fe5273fdc65c10385343b51d.jpg" alt></p><p>若要带尺寸的图片: <code>![Alt](https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=ecefedb3034f78f0940692a118586130/d439b6003af33a87fe5273fdc65c10385343b51d.jpg=30x30)</code></p><p><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=ecefedb3034f78f0940692a118586130/d439b6003af33a87fe5273fdc65c10385343b51d.jpg =200x250" alt></p><h2 id="六-引用"><a href="#六-引用" class="headerlink" title="(六)引用"></a>(六)引用</h2><p>写作的时引用他人的文字，只需在你希望引用的文字前面加上 &gt; 就可以</p><blockquote><p>真正高明的人，就是能够借助别人的智慧，来使自己不受蒙蔽的人。 —— 苏格拉底</p></blockquote><h2 id="七-如何插入一段漂亮的代码片"><a href="#七-如何插入一段漂亮的代码片" class="headerlink" title="(七)如何插入一段漂亮的代码片"></a>(七)如何插入一段漂亮的代码片</h2><p>代码快以”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```Python</span><br><span class="line">   def my_abs(x):</span><br><span class="line">    if x &gt;= 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="（八）表格"><a href="#（八）表格" class="headerlink" title="（八）表格"></a>（八）表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;星期一&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;星期二&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;星期三&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;董豪&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;斌豪&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;林豪&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>生成结果如下（顺序不要介意啊）</p><table><br>        <tr><br>            <th>星期一</th><br>            <th>星期二</th><br>            <th>星期三</th><br>        </tr><br>        <tr><br>            <td>斌豪</td><br>            <td>董豪</td><br>            <td>林豪/td&gt;<br>        </td></tr><br></table><p>或者另一种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">项目     | Value</span><br><span class="line">-------- | -----</span><br><span class="line">电脑  | $1600</span><br><span class="line">手机  | $12</span><br><span class="line">导管  | $1</span><br></pre></td></tr></table></figure></p><p>显示结果</p><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><h2 id="九-生成一个适合你的列表"><a href="#九-生成一个适合你的列表" class="headerlink" title="(九)生成一个适合你的列表"></a>(九)生成一个适合你的列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 项目</span><br><span class="line">  - 项目</span><br><span class="line">    - 项目</span><br><span class="line"></span><br><span class="line">1. 项目1</span><br><span class="line">2. 项目2</span><br><span class="line">3. 项目3</span><br><span class="line"></span><br><span class="line">- [ ] 计划任务</span><br><span class="line">- [x] 完成任务</span><br></pre></td></tr></table></figure><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li style="list-style: none"><input type="checkbox"> 计划任务</li><li style="list-style: none"><input type="checkbox" checked> 完成任务</li></ul><h3 id="（十）设定内容居中、居左、居右"><a href="#（十）设定内容居中、居左、居右" class="headerlink" title="（十）设定内容居中、居左、居右"></a>（十）设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>| 第一列       | 第二列         | 第三列        |<br>|:———–:| ————-:|:————-|<br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | </p><h2 id="（十一）如何创建一个注脚"><a href="#（十一）如何创建一个注脚" class="headerlink" title="（十一）如何创建一个注脚"></a>（十一）如何创建一个注脚</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[^2]: 注脚的解释</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## (十二)KaTeX数学公式</span><br><span class="line"></span><br><span class="line">```您可以使用渲染LaTeX数学表达式 [KaTeX](https://khan.github.io/KaTeX/):</span><br><span class="line"></span><br><span class="line">Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall</span><br><span class="line">n\in\mathbb N$ 是通过欧拉积分</span><br><span class="line"></span><br><span class="line">\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\,.</span><br></pre></td></tr></table></figure><p></p><br>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分<br><p></p><p>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.</p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式[here][1].</p></blockquote><h2 id="（十三）新的甘特图功能，丰富你的文章"><a href="#（十三）新的甘特图功能，丰富你的文章" class="headerlink" title="（十三）新的甘特图功能，丰富你的文章"></a>（十三）新的甘特图功能，丰富你的文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mermaid</span><br><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>甘特图</strong> 语法，参考 [这儿][2],</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上是markdown简单使用案例。Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成 极富表现力 的文档，所写所得，实时渲染.用户专注于内容，无需关心对文字排版，所以深受文字工作者、运营策划人员、程序猿的喜爱。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开门大吉&quot;&gt;&lt;a href=&quot;#开门大吉&quot; class=&quot;headerlink&quot; title=&quot;开门大吉&quot;&gt;&lt;/a&gt;开门大吉&lt;/h3&gt;&lt;p&gt;我这也是王婆卖瓜 现学现卖；首先让我们来看看Markdown都有哪些优点：&lt;/p&gt;
&lt;h5 id=&quot;1-纯文本，所以兼容性极强，可以用所有文本编辑器打开。&quot;&gt;&lt;a href=&quot;#1-纯文本，所以兼容性极强，可以用所有文本编辑器打开。&quot; class=&quot;headerlink&quot; title=&quot;1) 纯文本，所以兼容性极强，可以用所有文本编辑器打开。&quot;&gt;&lt;/a&gt;1) 纯文本，所以兼容性极强，可以用所有文本编辑器打开。&lt;/h5&gt;&lt;h5 id=&quot;2-让你专注于文字而不是排版。&quot;&gt;&lt;a href=&quot;#2-让你专注于文字而不是排版。&quot; class=&quot;headerlink&quot; title=&quot;2) 让你专注于文字而不是排版。&quot;&gt;&lt;/a&gt;2) 让你专注于文字而不是排版。&lt;/h5&gt;&lt;h5 id=&quot;3-格式转换方便，Markdown-的文本你可以轻松转换为-html、电子书等。&quot;&gt;&lt;a href=&quot;#3-格式转换方便，Markdown-的文本你可以轻松转换为-html、电子书等。&quot; class=&quot;headerlink&quot; title=&quot;3) 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。&quot;&gt;&lt;/a&gt;3) 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。&lt;/h5&gt;&lt;h5 id=&quot;4-Markdown-的标记语法有极好的可读性。&quot;&gt;&lt;a href=&quot;#4-Markdown-的标记语法有极好的可读性。&quot; class=&quot;headerlink&quot; title=&quot;4) Markdown 的标记语法有极好的可读性。&quot;&gt;&lt;/a&gt;4) Markdown 的标记语法有极好的可读性。&lt;/h5&gt;&lt;p&gt;那么下面将简单介绍如何使用Markdown
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰器Decorator</title>
    <link href="http://yoursite.com/2019/06/16/decorator/"/>
    <id>http://yoursite.com/2019/06/16/decorator/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2019-05-02T13:26:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://yq.aliyun.com/articles/70448?utm_campaign=wenzhang&amp;utm_medium=article&amp;utm_source=QQ-qun&amp;utm_content=m_11961" target="_blank" rel="noopener">设计模式</a>作为面对各种问题进行提炼和抽象而形成的解决方案，常见可分为三个大类：</p><ol><li>创建类设计模式</li><li>结构类设计模式</li><li>行为类设计模式<br>而今天主要讲述到是结构类设计模式中的装饰器模式。<a id="more"></a> <h3 id="一-目的"><a href="#一-目的" class="headerlink" title="一.目的"></a>一.目的</h3><strong>为一个对象动态的附加额外的职责</strong>。装饰器（Decorators)提供除了用子类的另外一种灵活的扩充功能方法。就增加功能而言，装饰器模式比生成子类更为灵活；它允许向一个现有的对象添加新的功能，同时又不改变其结构。<h3 id="二-UML类图解析"><a href="#二-UML类图解析" class="headerlink" title="二. UML类图解析"></a>二. UML类图解析</h3>装饰器模式的UML类图如下<img src="https://brightloong.github.io/images/design-pattern/decorator/decorator.png" alt><br>抽象组件（Component）定义一个对象接口，使得装饰对象能动态加入到组件中。<br>具体组件（ConcreteComponent）定义一个能附加职责的类。<br>抽象装饰器（Decorator）维持组件对象的一个引用，并定义与组件接口一致的接口。<br>具体装饰器（ConcreteDecorator）添加职责给组件。<br>三.实例–点餐系统<br>先定义一类饮料的基类 Beverage ，为不同饮料做好一个接口。<br>每种不同的饮料（Cole，milk）继承这个基类，覆盖各自的特性，比如描述，价格等。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Beverage():</span><br><span class="line">    name = &quot;&quot;</span><br><span class="line">    price = 0.0</span><br><span class="line">    type = &quot;BEVERAGE&quot;</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        return self.price</span><br><span class="line">    def setPrice(self, price):</span><br><span class="line">        self.price = price</span><br><span class="line">    def getName(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class coke(Beverage):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &quot;coke&quot;</span><br><span class="line">        self.price = 4.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class milk(Beverage):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &quot;milk&quot;</span><br><span class="line">        self.price = 5.0</span><br></pre></td></tr></table></figure></li></ol><p>除了基本配置，快餐店卖可乐时，可以选择加冰，如果加冰的话，要在原价上加0.3元；卖牛奶时，可以选择加糖，如果加糖的话，要原价上加0.5元,每种饮料都有很多中附加，，加糖，加冰等等;<br>这里我们定义装饰器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class drinkDecorator():</span><br><span class="line">    def getName(self):</span><br><span class="line">        pass</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">class iceDecorator(drinkDecorator):</span><br><span class="line">    def __init__(self,beverage):</span><br><span class="line">        self.beverage=beverage</span><br><span class="line">    def getName(self):</span><br><span class="line">        return self.beverage.getName()+&quot; +ice&quot;</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        return self.beverage.getPrice()+0.3</span><br><span class="line">    </span><br><span class="line">class sugarDecorator(drinkDecorator):</span><br><span class="line">    def __init__(self,beverage):</span><br><span class="line">        self.beverage=beverage</span><br><span class="line">    def getName(self):</span><br><span class="line">        return self.beverage.getName()+&quot; +sugar&quot;</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        return self.beverage.getPrice()+0.5</span><br></pre></td></tr></table></figure></p><p>在具体的业务场景中，就可以与饮料类进行关联。以牛奶+糖为例，示例业务场景如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if  __name__==&quot;__main__&quot;:</span><br><span class="line">    Telunsu=milk()</span><br><span class="line">    print (&quot;Name:%s&quot;%Telunsu.getName())</span><br><span class="line">    print (&quot;Price:%s&quot;%Telunsu.getPrice())</span><br><span class="line">    sugar_milk=sugarDecorator(Telunsu)</span><br><span class="line">    print (&quot;Name:%s&quot; % sugar_milk.getName())</span><br><span class="line">    print (&quot;Price:%s&quot; % sugar_milk.getPrice())</span><br></pre></td></tr></table></figure></p><p>打印结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\ACAno\python.exe E:/untitled1/11.py</span><br><span class="line">Name:milk</span><br><span class="line">Price:5.0</span><br><span class="line">Name:milk +sugar</span><br><span class="line">Price:5.5</span><br></pre></td></tr></table></figure></p><h3 id="四-优点与场景"><a href="#四-优点与场景" class="headerlink" title="四.优点与场景"></a>四.优点与场景</h3><p>优点：<br>1、抽象装饰器和具体被装饰的对象实现同一个接口<br>抽象装饰器里面要持有接口对象，以便请求传递,方便动态的扩展功能，且提供了比继承更多的灵活性；<br>2、Python的装饰器模式是实现Aspect Oriented Programming（AOP）的一种方式<br>应用场景：<br>1、需要动态添加一个类的功能，动态撤销，如本例</p><h3 id="五-reference"><a href="#五-reference" class="headerlink" title="五.reference"></a>五.reference</h3><ul><li><a href="https://yq.aliyun.com/articles/70737?utm_campaign=wenzhang&amp;utm_medium=article&amp;utm_source=QQ-qun&amp;utm_content=m_11966" target="_blank" rel="noopener">Python与设计模式–装饰器模式</a></li><li><a href="https://yq.aliyun.com/articles/70448?utm_campaign=wenzhang&amp;utm_medium=article&amp;utm_source=QQ-qun&amp;utm_content=m_11961" target="_blank" rel="noopener">Python与设计模式</a></li><li><a href="https://www.zhihu.com/question/26930016" target="_blank" rel="noopener">zhihu-如何理解Python装饰器？</a></li><li><a href="https://baike.baidu.com/item/AOP/1332219?fr=aladdin" target="_blank" rel="noopener">AOP</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/70448?utm_campaign=wenzhang&amp;amp;utm_medium=article&amp;amp;utm_source=QQ-qun&amp;amp;utm_content=m_11961&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;设计模式&lt;/a&gt;作为面对各种问题进行提炼和抽象而形成的解决方案，常见可分为三个大类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建类设计模式&lt;/li&gt;
&lt;li&gt;结构类设计模式&lt;/li&gt;
&lt;li&gt;行为类设计模式&lt;br&gt;而今天主要讲述到是结构类设计模式中的装饰器模式。
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="Design Pattern" scheme="http://yoursite.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>epsilon-Greedy 总结</title>
    <link href="http://yoursite.com/2019/06/16/eplison-greedy/"/>
    <id>http://yoursite.com/2019/06/16/eplison-greedy/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2019-02-23T11:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>新年伊始，万事待兴，很高兴我即将进入学生时代最忙碌的一年（<em>论文+offer的双重压力</em>）；寒假期间有读<a href="https://www.amazon.cn/dp/B01M6ZBZY3/?tag=360boxbuy-23" target="_blank" rel="noopener">&lt;刻意练习&gt;</a>这本书，书中最让我受益的信念便是<strong>杰出不是一种天赋，而是一种技巧；这种技巧，你我都可以掌握</strong>;而这样的一种锻炼自我的方式需要持之以恒的养成，在新的一年我也会坚持博客更新，愿你我都能拥有这样终生学习的能力；话不多数，让我们进入今天讨论的主题。 <a id="more"></a> </p><h3 id="一-bandit算法原理"><a href="#一-bandit算法原理" class="headerlink" title="(一)bandit算法原理"></a>(一)bandit算法原理</h3><blockquote><p>作为在线学习的一种，一切通过数据收集而得到的概率预估任务，都能通过Bandit系列算法来进行在线优化。其中算法模型参数是根据观察数据不断演变。常用于增强学习，智能决策等问题中。</p></blockquote><p>以传统的k-摇臂赌博机,（ k-armed bandit）为例：<img src="http://i.imgur.com/lgMM5xb.png" alt="摇臂机器"></p><blockquote><p>这种赌博机有k个摇臂, 玩家投一个游戏币以后可以按下任意一个摇臂, 每个摇臂以一定的概率吐出硬币, 作为奖赏. 但这个概率玩家并不知道. 玩家的目标是通过一定的策略获得最大化的累积奖赏. </p></blockquote><p>  一般我们假设每个臂是否产生收益，其背后有一个概率分布，产生收益的概率为p，然后不断地试验，去估计出一个置信度较高的概率p的概率分布就能近似解决这个问题。如何能估计概率p的概率分布呢？<br>  这里简单的介绍几种常用的bandit算法</p><h5 id="1-navie完全朴素算法"><a href="#1-navie完全朴素算法" class="headerlink" title="(1)navie完全朴素算法"></a>(1)navie完全朴素算法</h5><pre><code>先从最简单的开始，先试几次，每个臂都有了均值之后，一直选均值最大那个臂；</code></pre><h5 id="2-Thompson-sampling算法"><a href="#2-Thompson-sampling算法" class="headerlink" title="(2)Thompson sampling算法"></a>(2)Thompson sampling算法</h5><pre><code>每次选择臂的方式是：用每个臂现有的beta分布产生一个随机数b，选择所有臂产生的随机数中最大的那个臂去摇。</code></pre><p> code：<code>choice = numpy.argmax(pymc.rbeta(1 + self.wins, 1 + self.trials - self.wins))</code></p><h5 id="3-Upper-Confidence-Bound-置信区间上界"><a href="#3-Upper-Confidence-Bound-置信区间上界" class="headerlink" title="(3)Upper Confidence Bound(置信区间上界)"></a>(3)Upper Confidence Bound(置信区间上界)</h5><pre><code>先对每一个臂都试一遍之后，每次选择以下值最大的那个臂</code></pre><hr><h4 id="（二）贪心算法思想"><a href="#（二）贪心算法思想" class="headerlink" title="（二）贪心算法思想"></a>（二）贪心算法思想</h4><p><a href="https://baike.baidu.com/item/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/5411800?fr=aladdin" target="_blank" rel="noopener">贪心算法</a>（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。<br> ==基本步骤==</p><ol><li>建立数学模型来描述问题；</li><li>把求解的问题分成若干个子问题；</li><li>.对每一子问题求解，得到子问题的局部最优解；</li><li>把子问题的解局部最优解合成原来解问题的一个解。<blockquote><p><em>在算法中仅依据当前已有的信息就做出选择，并且以后都不会改变这次选择。（这是和动态规划法的主要差别）</em></p></blockquote></li></ol><hr><h3 id="三-EE问题"><a href="#三-EE问题" class="headerlink" title="(三)EE问题"></a>(三)EE问题</h3><p>这两个”E”，其中一个代表“exploit”,中文可译作“利用”；另一个代表“Explore”,中文可译作“探索”</p><blockquote><p>回到K摇臂机问题，由于并不清楚每个摇臂的吐钱的概率分布。那么，如果你想要最大化收益，你该怎么办呢？ 通常来说，你内心可能有两种好的决策：<br>1、找到某一个收益还不错的摇臂，然后坚持摇这个；<br>2、不断尝试探索新的老虎机。这个探索的过程中，可能发现更好的老虎机，当然也要承担摇差的老虎机带来损失的风险。</p></blockquote><p>显然，第一种对应的就是“exploit”，第二种对应“explore”，而bandit算法就是要解决这种EE问题，实现最大化收益。 。</p><p><img src="http://s14.sinaimg.cn/bmiddle/007eFDi0zy7ol5hDOlT8d&amp;690" alt></p><blockquote><p>核心问题：什么时候探索(Exploration)，什么时候利用 (Exploitation)?请看第四节</p></blockquote><hr><h3 id="四-epsilon-Greedy-Algorithm"><a href="#四-epsilon-Greedy-Algorithm" class="headerlink" title="(四)epsilon-Greedy Algorithm"></a>(四)epsilon-Greedy Algorithm</h3><p>ϵ -贪婪算法是如何在“exploit”和“explore”之间实现权衡，以尽可能实现最大化收益的呢？ 首先，从算法的名称我们知道，这是一种贪婪的算法。纯粹贪婪的算法，放到这种多臂老虎机的场景来看就是每次都选择当前那个最好的臂摇，即使从长远来看可能非常不好。</p><blockquote><p>这个ϵ代表执行执行“探索”的概率。比如设置ϵϵ=0.1，那么就表示有10%的概率会进行“探索”操作，而90%会进行“利用”操作，也就是摇当前最好的臂。如果以摇老虎机臂的过程，用次数来算的话，也就是，每10次操作，仅有1次操作去进行探索——尝试其他的臂。 </p></blockquote><p>code url:<a href="https://github.com/johnmyleswhite/BanditsBook/tree/master/python/algorithms/epsilon_greedy" target="_blank" rel="noopener">https://github.com/johnmyleswhite/BanditsBook/tree/master/python/algorithms/epsilon_greedy</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">def ind_max(x):</span><br><span class="line">  m = max(x)</span><br><span class="line">  return x.index(m)</span><br><span class="line"></span><br><span class="line">class EpsilonGreedy():</span><br><span class="line">  def __init__(self, epsilon, counts, values):</span><br><span class="line">    self.epsilon = epsilon</span><br><span class="line">    self.counts = counts</span><br><span class="line">    self.values = values</span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line">  def initialize(self, n_arms):</span><br><span class="line">    self.counts = [0 for col in range(n_arms)]</span><br><span class="line">    self.values = [0.0 for col in range(n_arms)]</span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line">  def select_arm(self):</span><br><span class="line">    if random.random() &gt; self.epsilon:</span><br><span class="line">      return ind_max(self.values)</span><br><span class="line">    else:</span><br><span class="line">      return random.randrange(len(self.values))</span><br><span class="line"></span><br><span class="line">  def update(self, chosen_arm, reward):</span><br><span class="line">    self.counts[chosen_arm] = self.counts[chosen_arm] + 1</span><br><span class="line">    n = self.counts[chosen_arm]</span><br><span class="line"></span><br><span class="line">    value = self.values[chosen_arm]</span><br><span class="line">    new_value = ((n - 1) / float(n)) * value + (1 / float(n)) * reward</span><br><span class="line">    self.values[chosen_arm] = new_value</span><br><span class="line">    return</span><br></pre></td></tr></table></figure></p><h3 id="五）参考"><a href="#五）参考" class="headerlink" title="(五）参考"></a>(五）参考</h3><p>[1]<a href="https://zhuanlan.zhihu.com/p/38739197" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38739197</a><br>[2]<a href="http://www.voidcn.com/article/p-ejmpwufg-bpz.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-ejmpwufg-bpz.html</a><br>[3]<a href="https://blog.csdn.net/qjf42/article/details/79655483" target="_blank" rel="noopener">https://blog.csdn.net/qjf42/article/details/79655483</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新年伊始，万事待兴，很高兴我即将进入学生时代最忙碌的一年（&lt;em&gt;论文+offer的双重压力&lt;/em&gt;）；寒假期间有读&lt;a href=&quot;https://www.amazon.cn/dp/B01M6ZBZY3/?tag=360boxbuy-23&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;lt;刻意练习&amp;gt;&lt;/a&gt;这本书，书中最让我受益的信念便是&lt;strong&gt;杰出不是一种天赋，而是一种技巧；这种技巧，你我都可以掌握&lt;/strong&gt;;而这样的一种锻炼自我的方式需要持之以恒的养成，在新的一年我也会坚持博客更新，愿你我都能拥有这样终生学习的能力；话不多数，让我们进入今天讨论的主题。
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
  </entry>
  
  <entry>
    <title>从交叉熵（cross entropy loss）看信息论</title>
    <link href="http://yoursite.com/2019/06/16/%E4%BA%A4%E5%8F%89%E7%86%B5/"/>
    <id>http://yoursite.com/2019/06/16/交叉熵/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2019-04-15T12:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>信息论真的是老生常谈的话题，生活在如今网络高速发达的时代，用户每天都会接收到数以万计的信息，就连我的研究方向也与信息传播有关，所以如何能从从不同的视角分享学习信息量背后的知识，是我写这篇博文的初衷。<br><img src="https://pic2.zhimg.com/v2-77dc18eeff6bd1dacc65ffee226dafd8_r.jpg" alt><br> <a id="more"></a> </p><h3 id="（一）信息量"><a href="#（一）信息量" class="headerlink" title="（一）信息量"></a>（一）信息量</h3><p>学过计算机或者通信原理的童鞋都对<a href="https://www.zhihu.com/question/29477583" target="_blank" rel="noopener">香农</a>甚是了解，其提出了一个定量衡量信息量的公式：</p><blockquote><p>假设x是一个离散型随机变量，其取值集合为X,概率分布函数p(x)=Pr(X=x),x∈X,则定义事件X=$x_0$的信息量 I($x_0$)为：<br>$I(x_0)=-log(P(x_0))$</p></blockquote><p>信息量是对事件发生概率的度量，一个事件发生的概率越低，则这个事件包含的信息量越大，这跟我们直观上的认知也是吻合的，越稀奇新闻包含的信息量越大，因为这种新闻出现的概率低。这里举一个有趣的例子增进了解</p><blockquote><p>事件A：巴西队进入了2018世界杯决赛圈。<br>事件B：中国队进入了2018世界杯决赛圈。 </p></blockquote><p>仅凭直觉来说，显而易见事件B的信息量比事件A的信息量要大。究其原因，是因为事件A发生的概率很大，事件B发生的概率很小。所以当越不可能的事件发生了，我们获取到的信息量就越大。越可能发生的事件发生了，我们获取到的信息量就越小。<br>从这里我们就可以顺理成章的引出熵的概念$\downarrow$</p><hr><h3 id="（二）熵"><a href="#（二）熵" class="headerlink" title="（二）熵"></a>（二）熵</h3><p>熵是一种对不确定性的方法，对于存在不确定性的系统，熵越大表示该系统的不确定性越大，熵为0表示没有任何不确定性。熵H(x)的定义如下：</p><blockquote><p>对于某个事件，有n种可能性发生，每一种可能性都有一个概率$p(x_i)$<br>$H(X)=−\sum_{n=1}^Np(x_i)\ln(p(x_i))$</p></blockquote><table><thead><tr><th>序号</th><th>事件</th><th>概率p</th><th>信息量I</th></tr></thead><tbody><tr><td>1</td><td>今天正常上课</td><td>0.7</td><td>-log(p(A))=0.36</td></tr><tr><td>2</td><td>今天不上课</td><td>0.2</td><td>-log(p(B))=1.61</td></tr><tr><td>3</td><td>学校爆炸了</td><td>0.1</td><td>-log(p(C))=2.30</td></tr></tbody></table><p>则可以计算出<br><code>H(X)=0.804</code></p><hr><h3 id="（三）相对熵（KL散度）"><a href="#（三）相对熵（KL散度）" class="headerlink" title="（三）相对熵（KL散度）"></a>（三）相对熵（KL散度）</h3><p>相对熵:简而言之其用来衡量两个取值为正的函数或概率分布之间的差异</p><blockquote><p>如果我们对于同一个随机变量 x 有两个单独的概率分布 P(x) 和 Q(x)，我们可以使用 KL 散度（Kullback-Leibler (KL) divergence）来衡量这两个分布的差异</p></blockquote><p>公式即：$KL(f(x) || g(x)) = \sum_{ x \in X} f(x) * \log_2 \frac{f(x)}{g(x)}$<br>假设我们想知道某个策略和最优策略之间的差异，我们就可以用相对熵来衡量这两者之间的差异。即<strong>相对熵 = 某个策略的交叉熵 - 信息熵</strong>（根据系统真实分布计算而得的信息熵，为最优策略）<br>$KL（p || q） = H（p，q） - H（p） =  \sum_{k=1}^N p_k \log_2 \frac{1}{q_k} - \sum_{k=1}^N p_k \log_2 \frac{1}{p_k} = \sum_{k=1}^N p_k \log_2 \frac{p_k}{q_k}$</p><hr><h3 id="（四）交叉熵函数"><a href="#（四）交叉熵函数" class="headerlink" title="（四）交叉熵函数"></a>（四）交叉熵函数</h3><blockquote><p>$H(p,q)=−\sum_{n=1}^Np(x_i)log(q(x_i))$</p></blockquote><h4 id="1-性质"><a href="#1-性质" class="headerlink" title="(1)性质"></a>(1)性质</h4><p>a)非负性。（所以我们的目标就是最小化代价函数）<br>b)当真实输出a与期望输出y接近的时候，代价函数接近于0.(比如y=0，loss～0；y=1，loss~1时，代价函数都接近0)。<br>此外它可以克服方差代价函数更新权重过慢的问题</p><h4 id="2-推导"><a href="#2-推导" class="headerlink" title="(2)推导"></a>(2)推导</h4><p>这里就不班门弄斧啦，推荐红石大佬的步骤，清晰明了$\longrightarrow$<a href="https://blog.csdn.net/red_stone1/article/details/80735068?spm=a2c4e.11153940.blogcont668056.7.754178e3ECdvhP" target="_blank" rel="noopener">简单的交叉熵损失函数</a></p><h4 id="2-交叉熵和均方误差的区别"><a href="#2-交叉熵和均方误差的区别" class="headerlink" title="(2)交叉熵和均方误差的区别"></a>(2)交叉熵和均方误差的区别</h4><p>交叉熵和均方误差都可以作为神经网络的损失函数，他们的区别在于：</p><p>   交叉熵适用于分类问题，结果是离散的类别（如图片分类），<br>   均方误差适用于回归问题，结果是一个连续的数值（如雨量预测）【实际上均方误差也可以用于分类问题】</p><p>在使用sigmod激活函数时，如果使用均方误差作为损失函数，反向传播的导数（直接影响学习速度）会包含sigmod函数的梯度，这个梯度随着变量的增大会趋向于0，导致学习速度迅速降低；<br>而如果使用交叉熵作为损失函数，就不存在这个问题，反向传播的导数包含sigmod函数，而不包含sigmod函数的导数</p><hr><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://christopher5106.github.io/deep/learning/2016/09/16/about-loss-functions-multinomial-logistic-logarithm-cross-entropy-square-errors-euclidian-absolute-frobenius-hinge.html" target="_blank" rel="noopener">(1)About loss functions</a><br><a href="https://blog.csdn.net/willduan1/article/details/73694826" target="_blank" rel="noopener">(2)神经网络Loss损失函数总结</a><br><a href="https://www.zhihu.com/question/41252833" target="_blank" rel="noopener">(3)如何通俗的解释交叉熵与相对熵?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;信息论真的是老生常谈的话题，生活在如今网络高速发达的时代，用户每天都会接收到数以万计的信息，就连我的研究方向也与信息传播有关，所以如何能从从不同的视角分享学习信息量背后的知识，是我写这篇博文的初衷。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-77dc18eeff6bd1dacc65ffee226dafd8_r.jpg&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="loss function" scheme="http://yoursite.com/tags/loss-function/"/>
    
  </entry>
  
  <entry>
    <title>python中的异常处理机制</title>
    <link href="http://yoursite.com/2019/06/16/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/06/16/异常处理机制/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2019-03-15T12:16:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前看莫神关于python中异常处理的讲解后，一直想要更深入的了解其中机制的运转，所以想借着今天复习一波。</p><blockquote><p>在Python当中，若一个程序在运行的时候出错，Python解释器会自动的在出错的地方生成一个异常对象，而后Python解释器会自动的在出错地方的附近寻找有没有对这个异常对象处理的代码，所谓异常处理代码就是try……except语句，如果没有，Python解释器会自动的将这个异常对象抛给其调用函数，就这样层层抛出，如果在main当中也没有对这个异常对象处理的代码，Python解释器（实际上是操作系统）最后会做一个简单粗暴的处理，将整个程序给终止掉，并将错误的信息在显示屏上输出。<br> <a id="more"></a><br><img src="https://img-blog.csdnimg.cn/20190315193530767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p6Z2hhc3Rpbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="（一）try语句的两种风格："><a href="#（一）try语句的两种风格：" class="headerlink" title="（一）try语句的两种风格："></a>（一）try语句的两种风格：</h3><p>1）：处理异常（try/except/else）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&apos;xxx&apos;)   #如果try的子语句能够实现，则执行这个语句。整个流程走向else，然后控制流通过整个try语句。</span><br><span class="line">except:</span><br><span class="line">    print(&apos;error&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(1)</span><br></pre></td></tr></table></figure></p><p>   若正常则输出：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XXX</span><br><span class="line"> 1</span><br></pre></td></tr></table></figure></p><p>   否则执行except就不会执行else，输出：<br> <code>error</code></p><p>2）：异常与否都将执行最后的代码（try/finally）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(xx)</span><br><span class="line">except:</span><br><span class="line">    print(&apos;error&apos;)</span><br><span class="line">finally:</span><br><span class="line">    print(&apos;ok&apos;)</span><br></pre></td></tr></table></figure></p><p>若出错则输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error</span><br><span class="line">ok</span><br></pre></td></tr></table></figure></p><p>否则输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XX</span><br><span class="line">ok</span><br></pre></td></tr></table></figure></p><h3 id="（二）处理多个异常与exception异常"><a href="#（二）处理多个异常与exception异常" class="headerlink" title="（二）处理多个异常与exception异常"></a>（二）处理多个异常与exception异常</h3><p>当处理多个异常时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    code</span><br><span class="line">except Error1 as e:  #处理Error1异常</span><br><span class="line">    print(e)</span><br><span class="line">except Error2 as e:   #处理Error2异常</span><br><span class="line">    print(e)</span><br><span class="line"> else:</span><br><span class="line">    print &apos;no error!&apos;</span><br><span class="line">finally:</span><br><span class="line">    print &apos;finally...&apos;</span><br><span class="line">print &apos;END&apos;</span><br></pre></td></tr></table></figure></p><p>当使用exception异常时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    code</span><br><span class="line">except (Error1,Error2,...) as e:</span><br><span class="line">    print(e)</span><br><span class="line">except Exception as e:   #用Exception表示一下子抓住所有异常，这个一般情况下建议在异常最后面用，用在最后抓未知的异常</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure></p><p><strong>其中值得注意的是：Python的错误其实也是class，所有的错误类型都继承自BaseException，所以在使用except时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”</strong>。<br>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    foo()</span><br><span class="line">except StandardError, e:</span><br><span class="line">    print &apos;StandardError&apos;</span><br><span class="line">except ValueError, e:</span><br><span class="line">    print &apos;ValueError&apos;</span><br></pre></td></tr></table></figure></p><p>   第二个except永远也捕获不到ValueError，因为ValueError是StandardError的子类，如果有，也被第一个except给捕获了。<br>Python所有的错误都是从BaseException类派生的，常见的错误类型和继承关系点击<a href="https://docs.python.org/2/library/exceptions.html#exception-hierarchy" target="_blank" rel="noopener">这里</a></p><h3 id="三-自定义异常"><a href="#三-自定义异常" class="headerlink" title="(三)自定义异常"></a>(三)自定义异常</h3><p>通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自Exception类，通过直接或间接的方式。<br>以下为与RuntimeError相关的实例,实例中创建了一个类，基类为RuntimeError，用于在异常触发时输出更多的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Networkerror(RuntimeError):</span><br><span class="line">    def __init__(self, arg):</span><br><span class="line">        self.args = arg</span><br></pre></td></tr></table></figure><p>  在你定义以上类后，你可以触发该异常<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  try:</span><br><span class="line">    raise Networkerror(&quot;Bad hostname&quot;)</span><br><span class="line">except Networkerror,a:</span><br><span class="line">    print a.args</span><br></pre></td></tr></table></figure></p><p> 在try语句块中，用户自定义的异常后执行except块语句，变量 a是用于创建Networkerror类的实例</p><h3 id="四-Python内置的logging模块记录错误"><a href="#四-Python内置的logging模块记录错误" class="headerlink" title="(四)Python内置的logging模块记录错误"></a>(四)Python内置的logging模块记录错误</h3><blockquote><p>如果不捕获错误，自然可以让Python解释器来打印出错误堆栈，但程序也被结束了。既然我们能捕获错误，就可以把错误堆栈打印出来，然后分析错误原因，同时，让程序继续执行下去<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">def foo(s):</span><br><span class="line">    return 10 / int(s)</span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s) * 2</span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        bar(&apos;0&apos;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line">main()</span><br><span class="line">print(&apos;END&apos;)</span><br></pre></td></tr></table></figure></p></blockquote><p>同样是出错，但程序打印完错误信息后会继续执行，并正常退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\ACAno\python.exe E:/untitled1/day20.py</span><br><span class="line">END</span><br><span class="line">ERROR:root:division by zero</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;E:/untitled1/day20.py&quot;, line 11, in main</span><br><span class="line">    bar(&apos;0&apos;)</span><br><span class="line">  File &quot;E:/untitled1/day20.py&quot;, line 7, in bar</span><br><span class="line">    return foo(s) * 2</span><br><span class="line">  File &quot;E:/untitled1/day20.py&quot;, line 4, in foo</span><br><span class="line">    return 10 / int(s)</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">通过配置，logging还可以把错误记录到日志文件里，方便事后排查</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前看莫神关于python中异常处理的讲解后，一直想要更深入的了解其中机制的运转，所以想借着今天复习一波。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Python当中，若一个程序在运行的时候出错，Python解释器会自动的在出错的地方生成一个异常对象，而后Python解释器会自动的在出错地方的附近寻找有没有对这个异常对象处理的代码，所谓异常处理代码就是try……except语句，如果没有，Python解释器会自动的将这个异常对象抛给其调用函数，就这样层层抛出，如果在main当中也没有对这个异常对象处理的代码，Python解释器（实际上是操作系统）最后会做一个简单粗暴的处理，将整个程序给终止掉，并将错误的信息在显示屏上输出。&lt;br&gt;
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
  </entry>
  
  <entry>
    <title>贝叶斯网络及朴素贝叶斯（二）</title>
    <link href="http://yoursite.com/2019/06/16/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    <id>http://yoursite.com/2019/06/16/朴素贝叶斯/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2018-12-21T08:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈哈我是挖坑的小当家，上次挖的<strong>贝叶斯</strong>当然还是要补上，中间有次周末断更是因为网球结业考试！万幸的是考试安全飘过了。本着<del>世间万物皆可贝叶斯的原则</del>（just kidding）话不多说让我们赶紧进入今天的贝叶斯网络和朴素贝叶斯的介绍</p><h3 id="一-贝叶斯网络"><a href="#一-贝叶斯网络" class="headerlink" title="(一)贝叶斯网络"></a>(一)贝叶斯网络</h3><blockquote><p>贝叶斯网络(Bayesian network)，又称信念网络(Belief Network)，或有向无环图模型(directed acyclic graphical model)，是一种概率图模型，于1985年由Judea Pearl首先提出。 <a id="more"></a> </p></blockquote><p>对于贝叶斯网络，我们可以用两种方法来看待它：<br>(1)首先贝叶斯网表达了各个节点间的条件独立关系，我们可以直观的从贝叶斯网当中得出属性间的条件独立以及依赖关系；<br>(2)另外可以认为贝叶斯网用另一种形式表示出了事件的联合概率分布，根据贝叶斯网的网络结构以及条件概率表（CPT）我们可以快速得到每个基本事件（所有属性值的一个组合）的概率。贝叶斯学习理论利用先验知识和样本数据来获得对未知样本的估计，而概率（包括联合概率和条件概率）是先验信息和样本数据信息在贝叶斯学习理论当中的表现形式。</p><p>它是一种模拟人类推理过程中因果关系的不确定性处理模型，其网络拓朴结构是一个有向无环图(DAG)。  贝叶斯网络的有向无环图中的节点表示随机变量。它们能够是可观察到的变量，或隐变量、未知參数等。觉得有因果关系（或非条件独立）的变量或命题则用箭头来连接。<br>类似生活中举例如下图<br><img src="https://pic1.zhimg.com/v2-bae66579889108001be863c42189b154_r.jpg" alt><br>若两个节点间以一个单箭头连接在一起，表示当中一个节点是“因(parents)”。另一个是“果(children)”，两节点就会产生一个条件概率值。若有不理解之处可参考这篇博文<a href="https://www.cnblogs.com/ironstark/p/5087081.html" target="_blank" rel="noopener">贝叶斯网络–概率图模型</a></p><blockquote><p>总而言之，连接两个节点的箭头代表此两个随机变量是具有因果关系，或非条件独立。</p></blockquote><hr><h4 id="（1）贝叶斯网络的3种结构形式"><a href="#（1）贝叶斯网络的3种结构形式" class="headerlink" title="（1）贝叶斯网络的3种结构形式"></a>（1）贝叶斯网络的3种结构形式</h4><p>贝叶斯网络的第一种结构形式<br><strong>1：head-to-head：</strong></p><blockquote><p>有：P(a,b,c) = P(a)<em>P(b)</em>P(c|a,b)成立，化简后可得<br>    即在c未知的条件下，a、b被阻断(blocked)，是独立的，称之为head-to-head条件独立</p></blockquote><p>   <strong>2：tail-to-tail</strong><br>    贝叶斯网络的第二种结构形式<br>    考虑c未知，跟c已知这两种情况：</p><blockquote><p>在c未知的时候，有：P(a,b,c)=P(c)<em>P(a|c)</em>P(b|c)，此时，没法得出P(a,b) = P(a)P(b)，即c未知时，a、b不独立。<br>在c已知的时候，有：P(a,b|c)=P(a,b,c)/P(c)，然后将P(a,b,c)=P(c)<em>P(a|c)</em>P(b|c)带入式子中。得到：P(a,b|c)=P(a,b,c)/P(c) = P(c)<em>P(a|c)</em>P(b|c) / P(c) = P(a|c)*P(b|c)。即c已知时，a、b独立。<br>    所以，在c给定的条件下，a，b被阻断(blocked)，是独立的。称之为tail-to-tail条件独立</p></blockquote><p><strong>3：head-to-tail</strong><br>    贝叶斯网络的第三种结构形式例如以下图所看到的：<br>  还是分c未知跟c已知这两种情况：</p><blockquote><p>c未知时。有：P(a,b,c)=P(a)<em>P(c|a)</em>P(b|c)。但无法推出P(a,b) = P(a)P(b)，即c未知时。a、b不独立。<br>c已知时，有：P(a,b|c)=P(a,b,c)/P(c)，且依据P(a,c) = P(a)<em>P(c|a) = P(c)</em>P(a|c)，可化简得到：</p></blockquote><p>   所以，在c给定的条件下，a，b被阻断(blocked)。是独立的，称之为head-to-tail条件独立。<br><em>总结这个head-to-tail其实就是一个链式网络</em></p><h4 id="（2）贝叶斯网络的实例"><a href="#（2）贝叶斯网络的实例" class="headerlink" title="（2）贝叶斯网络的实例"></a>（2）贝叶斯网络的实例</h4><p>这方面我看到很多大神在知乎上已经有许多有趣的例子，大家可以移步去<a href="https://www.zhihu.com/question/28006799/answer/526634825" target="_blank" rel="noopener">贝叶斯网络及其应用</a>，这里我就不多加赘述。</p><hr><h3 id="二-朴素贝叶斯"><a href="#二-朴素贝叶斯" class="headerlink" title="(二)朴素贝叶斯"></a>(二)朴素贝叶斯</h3><p>关于朴素贝叶斯我看到过很多解释 但是其中一位大佬的解释最让人简洁明了（超级好玩）</p><blockquote><p>朴素贝叶斯分类是一种十分简单的分类算法，叫它朴素贝叶斯分类是因为这种方法的思想真的很朴素，朴素贝叶斯的思想基础是这样的：对于给出的待分类项，求解在此项出现的条件下各个类别出现的概率，哪个最大，就认为此待分类项属于哪个类别。通俗来说，就好比这么个道理，你在街上看到一个黑人，我问你你猜这哥们哪里来的，你十有八九猜非洲。为什么呢？因为黑人中非洲人的比率最高，当然人家也可能是美洲人或亚洲人，但在没有其它可用信息下，我们会选择条件概率最大的类别，这就是朴素贝叶斯的思想基础。</p></blockquote><p>所以朴素贝叶斯中的<strong>朴素</strong>一词的来源就是假设<strong>各特征之间相互独立</strong>。这一假设使得朴素贝叶斯算法简洁高效，但有时会牺牲一定的分类准确率。<br><img src="http://wx2.sinaimg.cn/small/814268e3gy1fc9yeqonwjj20b40b4dgc.jpg=13*13" alt><br>贝叶斯公式我们已经在上次博文中介绍过，其转化为<strong>分类-特征公式</strong>其实就是<br><img src="https://img-blog.csdn.net/20180310163222326?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlzaGVybWluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br>整个朴素贝叶斯分类分为三个阶段如下图：<br><img src="https://img-blog.csdn.net/20171227142307769" alt></p><blockquote><p>1<strong>准备工作阶段</strong>，任务是为朴素贝叶斯分类做必要的准备，主要工作是根据具体情况确定特征属性，并对每个特征属性进行适当划分，然后由人工对一部分待分类项进行分类，形成训练样本集合。这一阶段的输入是所有待分类数据，输出是特征属性和训练样本。这一阶段是整个朴素贝叶斯分类中唯一需要人工完成的阶段，其质量对整个过程将有重要影响，分类器的质量很大程度上由特征属性、特征属性划分及训练样本质量决定。</p></blockquote><blockquote><p>2<strong>分类器训练阶段</strong>:  这个阶段的任务就是生成分类器，主要工作是计算每个类别在训练样本中的出现频率及每个特征属性划分对每个类别的条件概率估计，并将结果记录。其输入是特征属性和训练样本，输出是分类器。这一阶段是机械性阶段，根据前面讨论的公式可以由程序自动计算完成。</p></blockquote><blockquote><p>3<strong>应用阶段</strong>:这个阶段的任务是使用分类器对待分类项进行分类，其输入是分类器和待分类项，输出是待分类项与类别的映射关系。这一阶段也是机械性阶段，由程序完成。</p></blockquote><p>其中李航博士的《统计学习方法》对此有细致的研究，特意download了大神的coding本地运行了一遍<br>数据集采用的minist数据集，代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line">import math</span><br><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">from sklearn.model_selection import KFold</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 二值化</span><br><span class="line">def binaryzation(img):</span><br><span class="line">    cv_img = img.astype(np.uint8)</span><br><span class="line">    cv2.threshold(cv_img, 50, 1, cv2.THRESH_BINARY_INV, cv_img)</span><br><span class="line">    return cv_img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Train(trainset, train_labels):</span><br><span class="line">    prior_probability = np.zeros(class_num)  # 先验概率</span><br><span class="line">    conditional_probability = np.zeros((class_num, feature_len, 2))  # 条件概率</span><br><span class="line"></span><br><span class="line">    # 计算先验概率及条件概率</span><br><span class="line">    for i in range(len(train_labels)):</span><br><span class="line">        img = binaryzation(trainset[i])  # 图片二值化</span><br><span class="line">        label = train_labels[i]</span><br><span class="line">        (prior_probability)[label]=1+prior_probability[label]</span><br><span class="line"></span><br><span class="line">        for j in range(feature_len):</span><br><span class="line"></span><br><span class="line">            conditional_probability[label][j][img[j]] += 1</span><br><span class="line"></span><br><span class="line">    # 将概率归到[1.10001]</span><br><span class="line">    for i in range(class_num):</span><br><span class="line">        for j in range(feature_len):</span><br><span class="line">            # 经过二值化后图像只有0，1两种取值</span><br><span class="line">            pix_0 = conditional_probability[i][j][0]</span><br><span class="line">            pix_1 = conditional_probability[i][j][1]</span><br><span class="line"></span><br><span class="line">            # 计算0，1像素点对应的条件概率</span><br><span class="line">            probalility_0 = (float(pix_0) / float(pix_0 + pix_1)) * 1000000 + 1</span><br><span class="line">            probalility_1 = (float(pix_1) / float(pix_0 + pix_1)) * 1000000 + 1</span><br><span class="line"></span><br><span class="line">            conditional_probability[i][j][0] = probalility_0</span><br><span class="line">            conditional_probability[i][j][1] = probalility_1</span><br><span class="line"></span><br><span class="line">    return prior_probability, conditional_probability</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 计算概率</span><br><span class="line">def calculate_probability(img, label):</span><br><span class="line">    probability = int(prior_probability[label])</span><br><span class="line"></span><br><span class="line">    for i in range(len(img)):</span><br><span class="line">        probability *= int(conditional_probability[label][i][img[i]])</span><br><span class="line"></span><br><span class="line">    return probability</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Predict(testset, prior_probability, conditional_probability):</span><br><span class="line">    predict = []</span><br><span class="line"></span><br><span class="line">    for img in testset:</span><br><span class="line"></span><br><span class="line">        # 图像二值化</span><br><span class="line">        img = binaryzation(img)</span><br><span class="line"></span><br><span class="line">        max_label = 0</span><br><span class="line">        max_probability = calculate_probability(img, 0)</span><br><span class="line"></span><br><span class="line">        for j in range(1, 10):</span><br><span class="line">            probability = calculate_probability(img, j)</span><br><span class="line"></span><br><span class="line">            if max_probability &lt; probability:</span><br><span class="line">                max_label = j</span><br><span class="line">                max_probability = probability</span><br><span class="line"></span><br><span class="line">        predict.append(max_label)</span><br><span class="line"></span><br><span class="line">    return np.array(predict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class_num = 10</span><br><span class="line">feature_len = 784</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print(&apos;Start read data&apos;)</span><br><span class="line"></span><br><span class="line">    time_1 = time.time()</span><br><span class="line">    delimiter = &quot;\t&quot;</span><br><span class="line">    # 这样读入：</span><br><span class="line">    # df=pd.read_csv(&apos;path&apos;,delimiter=&quot;\t&quot;)</span><br><span class="line">    raw_data = pd.read_csv(&apos;D:/ACAno/data/train.csv&apos;, delimiter=&quot;\t&quot;)</span><br><span class="line">    data = raw_data.values</span><br><span class="line"></span><br><span class="line">    imgs = data[0::, 1::]</span><br><span class="line">    labels = data[::, 0]</span><br><span class="line"></span><br><span class="line">    # 选取 2/3 数据作为训练集， 1/3 数据作为测试集</span><br><span class="line">    train_features, test_features, train_labels, test_labels = train_test_split(imgs, labels, test_size=0.33,</span><br><span class="line">                                                                                random_state=23323)</span><br><span class="line">    # print train_features.shape</span><br><span class="line">    # print train_features.shape</span><br><span class="line"></span><br><span class="line">    time_2 = time.time()</span><br><span class="line">    print(&apos;read data cost &apos;, time_2 - time_1, &apos; second&apos;, &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">    print(&apos;Start training&apos;)</span><br><span class="line">    prior_probability, conditional_probability = Train(train_features, train_labels)</span><br><span class="line">    time_3 = time.time()</span><br><span class="line">    print(&apos;training cost &apos;, time_3 - time_2, &apos; second&apos;, &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">    print(&apos;Start predicting&apos;)</span><br><span class="line">    test_predict = Predict(test_features, prior_probability, conditional_probability)</span><br><span class="line">    time_4 = time.time()</span><br><span class="line">    print(&apos;predicting cost &apos;, time_4 - time_3, &apos; second&apos;, &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">    score = accuracy_score(test_labels, test_predict)</span><br><span class="line">    print(&quot;The accruacy socre is &quot;, score)</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实自己也是最近常用到求解贝叶斯纳什均衡才开始认真的的学习这方面的知识，参考了很多博文后加深了点自己对贝叶斯公式及其原理的了解。希望大家都能够喜欢自己的研究，2018即将过去，我会在最近补上我近期的生活随笔及感悟，并且预告下周我会介绍bandit算法中的epsilon-greedy，欢迎大家相互交流（主要是我学您哈哈哈哈）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈哈哈我是挖坑的小当家，上次挖的&lt;strong&gt;贝叶斯&lt;/strong&gt;当然还是要补上，中间有次周末断更是因为网球结业考试！万幸的是考试安全飘过了。本着&lt;del&gt;世间万物皆可贝叶斯的原则&lt;/del&gt;（just kidding）话不多说让我们赶紧进入今天的贝叶斯网络和朴素贝叶斯的介绍&lt;/p&gt;
&lt;h3 id=&quot;一-贝叶斯网络&quot;&gt;&lt;a href=&quot;#一-贝叶斯网络&quot; class=&quot;headerlink&quot; title=&quot;(一)贝叶斯网络&quot;&gt;&lt;/a&gt;(一)贝叶斯网络&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;贝叶斯网络(Bayesian network)，又称信念网络(Belief Network)，或有向无环图模型(directed acyclic graphical model)，是一种概率图模型，于1985年由Judea Pearl首先提出。
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="Bayesian network" scheme="http://yoursite.com/tags/Bayesian-network/"/>
    
  </entry>
  
  <entry>
    <title>混合策略下纳什均衡的求解方法</title>
    <link href="http://yoursite.com/2019/06/16/%E6%B7%B7%E5%90%88%E7%AD%96%E7%95%A5nash%E6%B1%82%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/06/16/混合策略nash求解/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2018-11-30T09:14:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为自己的研究方向是博弈论问题，之前在做混合策略+演化博弈（现在不做了）求解的时候，参考了很多关于纳什均衡和策略求解的方法，今天在这里会简单的叙述：一般情况下 ，我们可以如何去快速求解混合策略下的NE（<em>Nash Equilibrium</em>）<br> 问题很简单，那么我来给大家精简介绍下相关概念吧。</p><h3 id="一-概念介绍"><a href="#一-概念介绍" class="headerlink" title="一 概念介绍"></a>一 概念介绍</h3><p> 1）纳什均衡</p><blockquote><p> 纳什均衡是指博弈中这样的局面，对于每个参与者来说，只要其他人不改变策略，他就无法改善自己的状况</p></blockquote><p> 谈到博弈，都不得不提一位人物<a href="https://baike.baidu.com/item/%E7%BA%A6%E7%BF%B0%C2%B7%E7%BA%B3%E4%BB%80/957881" target="_blank" rel="noopener">纳什</a>,也正因为他，才有我今天能研究的课题（==鞠躬==）<br> <img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543577321060&amp;di=598d0c9e0ccfe57242c5b1b1e024c64f&amp;imgtype=0&amp;src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F13649525-3671731427272c7f.jpg" alt></p><blockquote><p>约翰·纳什，生于1928年6月13日。著名经济学家、博弈论创始人、《美丽心灵》男主角原型。前麻省理工学院助教，后任普林斯顿大学数学系教授，主要研究博弈论、微分几何学和偏微分方程。由于他与另外两位数学家（经济学家，约翰·C·海萨尼和莱因哈德·泽尔腾）在非合作博弈的均衡分析理论方面做出了开创性的贡献，对博弈论和经济学产生了重大影响，而获得1994年诺贝尔经济学奖。<br><a id="more"></a><br>2）纯策略与混合策略<br><a href="https://baike.baidu.com/item/%E7%BA%AF%E7%AD%96%E7%95%A5/5360140?fr=aladdin" target="_blank" rel="noopener">纯策略</a><br>混合策略<br>混合策略纳什均衡是面对其他博弈者选择的不确定性的一个理性对策，其主要特征是作为混合策略一部分的每一个纯策略有相同的期望值，否则，一个博弈者会选择那个期望值最高的策略而排除所有其他策略，这意味着原初的状态不是一个均衡。</p></blockquote><p>接下来让我们用公式来简化<br>  Ⅰ与Ⅱ是一个博弈的两个局中人。他们的纯策略集(1.2.1)分别记为：</p><pre><code>S={s1,s2,…sn}和T={t1,t2, …tm}      （1.2.1）</code></pre><p>x与y是两个概率向量，即:<br>               <code>x=(x1,x2, …xn)T；xi≥0（i=1,2, …n）;∑xi = 1</code><br>       <code>y=(y1,y2, …ym)T；yj≥0（j=1,2, …m）;∑yj = 1</code><br>若 x表示对局中人Ⅰ的纯策略集S的全体策略的一种概率选择；y表示对局中人Ⅱ的纯策略集T的全体策略的一种概率配置，即：</p><pre><code>Ⅰ 以概率x1选择策略s1，以概率x2选择策略s2，……以概率xn选择策略sn。Ⅱ 以概率y1选择策略t1，以概率y2选择策略t2，……以概率ym选择策略tm。</code></pre><p>则  称x为局中人Ⅰ的混合策略；称y为局中人Ⅱ的混合策略。<br>  因此 其意义是表示局中人对各个纯策略的偏好程度，或是对多次博弈达到均衡结局的各个纯策略选择的概率估计。</p><h3 id="二例题解析"><a href="#二例题解析" class="headerlink" title="二例题解析"></a>二例题解析</h3><p>在搜集资料的时候看到很多人都推荐  《<a href="http://www.360doc.com/content/17/0226/23/9065871_632272632.shtml" target="_blank" rel="noopener">如何制定一个必赢的赌博规则</a>》这篇文章，觉得新奇有趣，还有大佬复现代码，话不多说，来举一波硬币正反的问题。</p><blockquote><p>假如你正在图书馆枯坐，一位陌生美女主动过来和你搭讪，并要求和你一起玩个数学游戏。美女提议：“让我们各自亮出硬币的一面，或正或反。如果我们都是正面，那么我给你3元，如果我们都是反面，我给你1元，剩下的情况你给我2元就可以了。”那么该不该和这位姑娘玩这个游戏呢？这基本是废话，当然该。问题是，这个游戏公平吗？</p></blockquote><hr><p>情景一出，我们便会在心里嘀咕一声：好好地美女找上我，还要和我做游戏！怎么这情况隔着八里地都能闻着忽悠的味道。<img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543577158353&amp;di=6f6ca1b9007f77d0ff49748a29dc1faf&amp;imgtype=0&amp;src=http%3A%2F%2Fimgup02.fanw8.com%2Ffanw8%2F2018-07%2F04%2F14%2F15306857132122_8.jpg" alt><br>但是我们转念一算<br>按我们平时正常想是：</p><blockquote><p>两面都一样（或正或反）概率为 1/4+1/4，则其数学期望<br>1/4 <em> 3 + 1/4 </em> 1 = 1 ，而一正一反的数学期望也是1/2 * 2 = 1</p></blockquote><p><strong>貌似是公平的，实际则不然。问题就出在硬币是我们人为控制的，想正面就正面，想反面就反面，而上述情况只应在抛硬币的时候才成立</strong><br>依据我们上文的介绍，玩家可以使用纯策略(比如一直出正面或者一直出反面)，使得每人都赚得最多或亏得最少；或者是混合策略纳什均衡，而在这个游戏中，便应该采用混合策略纳什均衡。</p><blockquote><p>假设我们出正面的概率是x，反面的概率是1-x，美女出正面的概率是y，反面的概率是1-y。为了使利益最大化，应该在对手出正面或反面的时候我们的收益都相等</p></blockquote><p>便有如下混合策略矩阵：<br><img src="https://img-blog.csdnimg.cn/20181130164634944.png" alt="混合策略矩阵"><br>对玩家自己而言：<br><code>3x + (-2)*(1-x)=(-2) * x + 1*( 1-x )</code><br>解得<code>x=3/8</code><br>对美女而言：<br><code>-3y + 2( 1-y)= 2y+ (-1) * ( 1-y)</code><br>解得<code>y=3/8</code><br>即美女每次的期望收益是：<code>2(1-y)- 3y = 1/8元</code><br>摘录主要代码验证如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#define SUM_COUNT 1000</span><br><span class="line">int my[SUM_COUNT],your[SUM_COUNT];</span><br><span class="line">int my_money_sum = 0,your_money_sum = 0;</span><br><span class="line">/*数组my美女 ，your 模拟每次出手时两人的硬币正反面，正面为1 ，反面为 0 */</span><br><span class="line">void get_rand(int sum , int One_count)</span><br><span class="line">&#123;</span><br><span class="line">int i = 0;</span><br><span class="line">int count = 0;</span><br><span class="line">for (i =0 ;i&lt;sum; i++)</span><br><span class="line">&#123;</span><br><span class="line">your[i] = rand()%2;</span><br><span class="line">my[i] = rand() % 2;</span><br><span class="line">if(my[i] ==1 )</span><br><span class="line">&#123;count++;&#125;</span><br><span class="line">if(count &gt; One_count)</span><br><span class="line">&#123;my[i] = 0;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void count_the_money(int sum)/*my_money_sum 和 your_money_sum 为双方最后的所得*/</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">for(i = 0; i&lt;sum; i++)</span><br><span class="line">&#123;</span><br><span class="line">if( my[i] == your[i]) </span><br><span class="line">&#123;</span><br><span class="line">if (my[i] == 1)</span><br><span class="line">&#123;your_money_sum += 3;&#125;</span><br><span class="line">if(my[i] == 0)</span><br><span class="line">&#123;your_money_sum +=1;&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if( my[i] != your[i])</span><br><span class="line">&#123;my_money_sum += 2;&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果截图<br><img src="https://img-blog.csdnimg.cn/20181130165706116.png" alt="在这里插入图片描述"><br><strong>小结：在双方都采取最优策略的情况下，平均每次美女赢1/8元。而我们则亏1/8元。（其中美女保持出正面的频数在3/8）</strong></p><h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三 总结"></a>三 总结</h3><p>当然本文只是介绍了混合策略纳什均衡的一种方法，还可以从盈利函数 线性规划等方法来尝试求解。而我本人也是在研究博弈论中随机博弈的相关问题，有很多不足之处，希望大家多帮助，thanks.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为自己的研究方向是博弈论问题，之前在做混合策略+演化博弈（现在不做了）求解的时候，参考了很多关于纳什均衡和策略求解的方法，今天在这里会简单的叙述：一般情况下 ，我们可以如何去快速求解混合策略下的NE（&lt;em&gt;Nash Equilibrium&lt;/em&gt;）&lt;br&gt; 问题很简单，那么我来给大家精简介绍下相关概念吧。&lt;/p&gt;
&lt;h3 id=&quot;一-概念介绍&quot;&gt;&lt;a href=&quot;#一-概念介绍&quot; class=&quot;headerlink&quot; title=&quot;一 概念介绍&quot;&gt;&lt;/a&gt;一 概念介绍&lt;/h3&gt;&lt;p&gt; 1）纳什均衡&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 纳什均衡是指博弈中这样的局面，对于每个参与者来说，只要其他人不改变策略，他就无法改善自己的状况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 谈到博弈，都不得不提一位人物&lt;a href=&quot;https://baike.baidu.com/item/%E7%BA%A6%E7%BF%B0%C2%B7%E7%BA%B3%E4%BB%80/957881&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;纳什&lt;/a&gt;,也正因为他，才有我今天能研究的课题（==鞠躬==）&lt;br&gt; &lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1543577321060&amp;amp;di=598d0c9e0ccfe57242c5b1b1e024c64f&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F13649525-3671731427272c7f.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;约翰·纳什，生于1928年6月13日。著名经济学家、博弈论创始人、《美丽心灵》男主角原型。前麻省理工学院助教，后任普林斯顿大学数学系教授，主要研究博弈论、微分几何学和偏微分方程。由于他与另外两位数学家（经济学家，约翰·C·海萨尼和莱因哈德·泽尔腾）在非合作博弈的均衡分析理论方面做出了开创性的贡献，对博弈论和经济学产生了重大影响，而获得1994年诺贝尔经济学奖。&lt;br&gt;
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="Nash Equilibrium" scheme="http://yoursite.com/tags/Nash-Equilibrium/"/>
    
      <category term="Game theory" scheme="http://yoursite.com/tags/Game-theory/"/>
    
  </entry>
  
  <entry>
    <title>浅谈激活函数</title>
    <link href="http://yoursite.com/2019/06/16/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/06/16/激活函数/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2019-03-30T09:13:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写这篇文章前首先恭喜深度学习三巨头成为新晋<a href="https://baike.baidu.com/item/图灵奖/324645?fr=aladdin" target="_blank" rel="noopener">图灵奖</a>得主！🎉<img src="http://www.bccn.net/media/news/2019/03/28/1553733617_17956607.png" alt="深度学习三巨头成为新晋图灵奖得主"></p><blockquote><p>科普：<br>人工神经网络作为一种帮助计算机识别模式和模拟人类智能的工具在20世纪80年代被引入，但直到21世纪初，只有杨乐昆、辛顿和本吉奥等一小群人仍然坚持使用这种方法。尽管他们的努力也曾遭到怀疑，但他们的想法最终点燃了人工智能社区对神经网络的兴趣，带来了一些最新的重大技术进步。他们的方法现在是该领域的主导范式（dominant paradigm）</p></blockquote><p>我一直在想如果有一天会在博客中写点神经网络方面的tips，应该会从哪里入手最好，直到同学提出神经网络激活函数的疑问，才忽觉可以从激活函数的理解作为切入点浅谈我对人工神经网络这项伟大发明的由衷敬意（同时我也要在这里感谢和汇总到许多大拿的经典观点，在这里向大家致敬）<a id="more"></a> </p><h2 id="（一）简单神经网络介绍"><a href="#（一）简单神经网络介绍" class="headerlink" title="（一）简单神经网络介绍"></a>（一）简单神经网络介绍</h2><p><img src="https://pic1.zhimg.com/80/v2-0cd70031da4220377fd080f54c0370b4_hd.jpg" alt="在这里插入图片描述"><br>科学总是回归到人的本质去探究，当科学家发现人之所以会思考是因为我们的大脑中具有神经元，这样天然的神经网络使得人体可以根据神经中枢的指令，对外部刺激做出反应。<br>这样的神经网络组成包括有：<strong>输入节点，连接，输入与权重的结合，激活函数，输出</strong>等<br><code>为了简化模型，我们约定每种输入只有两种可能：1 或 0。如果所有输入都是1，表示各种条件都成立，输出就是1；如果所有输入都是0，表示条件都不成立，输出就是0。</code><br>对于人工神经网络的定义诠释，我个人很喜欢知乎精选问题首赞的解答（跳转门-&gt;）：<a href="https://www.zhihu.com/question/22553761" target="_blank" rel="noopener">如何简单形象又有趣地讲解神经网络是什么？</a>感兴趣的小伙伴不如细心阅读一番。</p><hr><h2 id="（二）激活函数的由来"><a href="#（二）激活函数的由来" class="headerlink" title="（二）激活函数的由来"></a>（二）激活函数的由来</h2><p>当我们了解到神经网络大概的基本要素时，好奇的你不由会问到为什么我们需要激活函数（activation function）运用其中？<br>这里我们会提到多层神经网络，这也是是我们常用的👇。</p><blockquote><p>多层感知器又叫前馈神经网络，类似神经元以层级结构组织在一起。层数一般是二三层，但是理论上层数是无限的。网络的层就像生物神经元：一层的输出，是下一层的输入。、<br><img src="http://img5.imgtn.bdimg.com/it/u=3554422696,3171296195&amp;fm=26&amp;gp=0.jpg" alt="在这里插入图片描述"><br>网络层分为<strong>输入层、隐藏层和输出层</strong>。多层感知器通常是全连接(fully-connected)的，一层之中的每一个感知器都与下一层的每一个感知器相连接，尽管这不是强制性，但通常是标配。感知器只能表征线性可分的问题，而多层感知器结合非线性的激活函数就突破了这一限制，可以表征更加复杂的决策边界。</p></blockquote><p>而使用激活函数的好处一般有：<br>1）改变之前数据的线性关系：若网络中全部是线性变换，则多层网络可以通过矩阵变换，直接转换成一层神经网络，所以激活函数的存在，使得神经网络的“多层”有了实际的意义！使网络更加强大，增加网络的能力，使它可以学习复杂的事物，复杂的数据，以及<strong>表示输入输出之间非线性的复杂的任意函数映射</strong>。<br>2）防止数据过大溢出风险：是执行数据的归一化，将输入数据映射到某个范围内，再往下传递，这样做的好处是可以限制数据的扩张。</p><hr><h2 id="（三）激活函数的分类"><a href="#（三）激活函数的分类" class="headerlink" title="（三）激活函数的分类"></a>（三）激活函数的分类</h2><p>类似武林派系之分，传统激活函数大致分为==identity==、==sigmoid系==、==ReLU 及其变体==</p><p>1）通过激活函数 Identity，节点的输入等于输出。它完美适合于潜在行为是线性（与线性回归相似）的任务。当存在非线性，单独使用该激活函数是不够的，但它依然可以在最终输出节点上作为激活函数用于回归任务。</p><p>2）传统神经网络中最常用的两个激活函数：Sigmoid系（Logistic-Sigmoid、Tanh-Sigmoid）</p><blockquote><p>从数学上来看,非线性的Sigmoid函数对中央区的信号增益较大,对两侧区的信号增益小,在信号的特征空间映射上,有很好的效果,通过对加权的输入进行非线性组合产生非线性决策边界.<br>从神经科学上来看,中央区酷似神经元的兴奋态,两侧区酷似神经元的抑制态,因而在神经网络学习方面,可以将重点特征推向中央区,将非重点特征推向两侧区.</p></blockquote><p>3）修正线性单元（Rectified linear unit，ReLU）是神经网络中最常用的激活函数。它保留了 step 函数的生物学启发（只有输入超出阈值时神经元才激活）。<br>不过当输入为正的时候，导数不为零，从而允许基于梯度的学习（尽管在 x=0 的时候，导数是未定义的）。使用这个函数能使计算变得很快，因为无论是函数还是其导数都不包含复杂的数学运算；缺点在于在训练的时候,网络很脆弱,很容易出现很多神经元值为0,从而再也训练不动.一般将学习率设置为较小值来避免这种情况的发生.<br>[汇总]</p><h2 id><a href="#" class="headerlink" title></a><img src="http://xijun-album.oss-cn-hangzhou.aliyuncs.com/ActivationFunction/pic1.png" alt="在这里插入图片描述"></h2><h2 id="（四）小结"><a href="#（四）小结" class="headerlink" title="（四）小结"></a>（四）小结</h2><p>   激活函数的意义是“让神经网络具备强大的拟合能力”。同时也是AI神经网络给予这些函数新的生命！十几二十年前都不好意思说自己是做AI的，因为觉得容易被当成骗子。三位大拿依然保持学者的本色，恭喜三位，坚守几十年，实至名归！</p><p>同时国内码农界也出了件大事：github飞速star的<a href="https://996.icu/#/zh_CN" target="_blank" rel="noopener">996,icu</a>项目同样也刺激着大家的眼球。</p><p>这里作为IT界一名学生的我，其实也是从社会媒体以及师兄师姐的焦虑中感受良多，这里我想说：计算机科学是一门新兴工业科学，一个研究成果的重要性，是看应用和对改变世界的影响有多少，新的事物带来新的挑战与危机， 希望越来越强大的神经网络可以为科研助力高飞，也希望自己论文能够早中，最后祝愿大家学习快乐。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在写这篇文章前首先恭喜深度学习三巨头成为新晋&lt;a href=&quot;https://baike.baidu.com/item/图灵奖/324645?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;图灵奖&lt;/a&gt;得主！🎉&lt;img src=&quot;http://www.bccn.net/media/news/2019/03/28/1553733617_17956607.png&quot; alt=&quot;深度学习三巨头成为新晋图灵奖得主&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;科普：&lt;br&gt;人工神经网络作为一种帮助计算机识别模式和模拟人类智能的工具在20世纪80年代被引入，但直到21世纪初，只有杨乐昆、辛顿和本吉奥等一小群人仍然坚持使用这种方法。尽管他们的努力也曾遭到怀疑，但他们的想法最终点燃了人工智能社区对神经网络的兴趣，带来了一些最新的重大技术进步。他们的方法现在是该领域的主导范式（dominant paradigm）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我一直在想如果有一天会在博客中写点神经网络方面的tips，应该会从哪里入手最好，直到同学提出神经网络激活函数的疑问，才忽觉可以从激活函数的理解作为切入点浅谈我对人工神经网络这项伟大发明的由衷敬意（同时我也要在这里感谢和汇总到许多大拿的经典观点，在这里向大家致敬）
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
  </entry>
  
  <entry>
    <title>2018年尾</title>
    <link href="http://yoursite.com/2019/06/16/%E7%B5%AE%E7%B5%AE%E5%8F%A8%E5%8F%A81/"/>
    <id>http://yoursite.com/2019/06/16/絮絮叨叨1/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2018-12-24T01:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>叮叮当叮叮当，铃儿响叮当！<br><img src="http://img.zcool.cn/community/01c1575a5c6cfca8012113c77d038c.jpg@1280w_1l_2o_100sh.jpg" alt><a id="more"></a><br>临近2018年尾声，我的第一篇生活小随文终于在千呼万唤中始出来。感觉学业和生活上的事情接踵而至，自己已经忙得不亦乐乎。当然细心地你已经发现我对busy这件事情的量化结果是<strong>乐</strong>，我一直秉持着这样的信念 ： </p><blockquote><p>人年轻时期 忙即营养</p></blockquote><p> 当然这里的“年轻”因人而异，有的人而立之年便暮霭程程，有的人半百仍倍感青春健在；同理，不同的人对于忙的定义也千差万别，这里自然是不必深究。<br> 而令我真正坐下来去总结这段时期的点滴生活的契机，是前不久知乎上一个热门话题：<a href="https://www.zhihu.com/question/305711879/answer/552617587" target="_blank" rel="noopener">2018年，你有哪些特想撤回却无法撤回的操作？？</a><br> 我私以为这样的发人深省的问题一般匿名者居多，且多是些<em>与世界分享你刚编的水文</em>，意料之外的是我竟然不落俗套的喜欢这些故事里的桥段，真实又有趣。<br> 所以当我静下心去思考自己的2018：出现了哪些惊喜与懊恼，到底有多少捧腹大笑的场景以及多少不堪回首的剧目，对于愉悦的片段是否想要保留，那不开心的事件又是否需要一键delete？很多并不真实的想法会飞速的在我的脑海里一瞬即逝，然后时间把这一切都凝固成一个种子，缓缓地细心地埋在生命树上那片刻着2018的枝丫里面。</p><blockquote><p>我感激自己所拥有的，也并不懊悔所失去的，因为这都是实实在在的生活，一个真真切切的属于我一个人的2018.</p></blockquote><p> 所以没什么想要在这一年里想要撤回的操作。<br> 读到这里 你会不会以为我是个佛系的青年人，不以物喜不以己悲，哈哈哈哈如果你的脑海里真的出现这样的话语，那一定不是我！<br> <strong>过去即经历，可未来更可期</strong><br> 我对未来可真的大有野心好吗，你要是想问我2019年有什么小目标，我会毫不犹豫斩钉截铁的告诉你：</p><blockquote><p>2019 ，我想要成为有个有温度的人，万事胜意!</p></blockquote><p>祝愿大家 ：扬帆破浪，未来可期</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;叮叮当叮叮当，铃儿响叮当！&lt;br&gt;&lt;img src=&quot;http://img.zcool.cn/community/01c1575a5c6cfca8012113c77d038c.jpg@1280w_1l_2o_100sh.jpg&quot; alt&gt;
    
    </summary>
    
      <category term="Life perception" scheme="http://yoursite.com/categories/Life-perception/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>从贝叶斯公式到贝叶斯网络（一）</title>
    <link href="http://yoursite.com/2019/06/16/%E8%B4%9D%E5%8F%B6%E6%96%AF1/"/>
    <id>http://yoursite.com/2019/06/16/贝叶斯1/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2018-12-09T10:18:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>   最近真的是离不开贝叶斯这个科学牛人，他的理论至今仍对科学研究有着极大的影响，所以自己在兴趣与学业的双重<del>感知</del>(鸭梨)下毅然而然的决定要加深自己对贝叶斯理论的了解，奈何知识点太多而自己目前的了解有限，所以<code>本章主要讲述基本的公式，算法思想和场景</code>更多具体而生动的内容咱们下文再续。话不多说让我们一睹为快！</p><blockquote><p>BTW,若观点错误或者引用侵权的欢迎指正交流。<a id="more"></a> </p></blockquote><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>  自古以来，人们对一件事情发生或不发生的概率，只有固定的0和1，即要么发生，要么不发生，而不会去考虑某件事情发生的概率有多大，不发生的概率又是多大。比如如果问那时的人们一个问题：“有一个袋子，里面装着若干个白球和黑球，请问从袋子中取得白球的概率是多少？”他们会不假思索告诉你，取出白球和黑球都是一半对一半，非黑即白；</p><blockquote><p>即θ只能有一个值，而且不论你取了多少次，取得白球的概率θ始终都是1/2，即不随观察结果X 的变化而变化。</p></blockquote><p>   这种频率派的观点长期统治着人们的观念，直到后来一个名叫Thomas Bayes的人物出现。（*_^当然我国古代著名哲学家庄子老先生的<a href="http://www.doc88.com/p-5621381449250.html" target="_blank" rel="noopener">某些思想</a>其实也暗含着贝叶斯理论）</p><h4 id="1-贝叶斯方法的提出"><a href="#1-贝叶斯方法的提出" class="headerlink" title="(1)贝叶斯方法的提出"></a>(1)贝叶斯方法的提出</h4><p>   <a href="https://baike.baidu.com/item/%E8%B4%9D%E5%8F%B6%E6%96%AF/1405899" target="_blank" rel="noopener">托马斯·贝叶斯Thomas Bayes（1702-1763）</a><img src="https://img-blog.csdnimg.cn/20181209165041827.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p6Z2hhc3Rpbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>生活在18世纪的贝叶斯生前是位受人尊敬英格兰长老会牧师。为了证明上帝的存在，他发明了概率统计学原理，遗憾的是，并不为当时的人们所熟知他的这一美好愿望至死也未能实现。贝叶斯在数学方面主要研究概率论。他首先将归纳推理法  用于概率论基础理论，并创立了贝叶斯统计理论，对于统计决策函数、统计推断、统计的估算等做出了贡献。</p></blockquote><p>在 继续深入解说贝叶斯方法之前，先简单总结下频率派与贝叶斯派各自不同的思考方式：</p><blockquote><p>频率派把须要判断的參数θ看做是固定的未知常数。即概率尽管是未知的，但最起码是确定的一个值，同一时候，样本X 是随机的，所以频率派重点研究样本空间，大部分的概率计算都是针对样本X 的分布。<br>贝叶斯派的观点则截然相反。他们觉得參数是随机变量，而样本X 是固定的，由于样本是固定的，所以他们重点研究的是參数的分布。</p></blockquote><p>至此，贝叶斯及贝叶斯派提出了一个思考问题的固定模式：</p><blockquote><p>先验分布 $\Pi(\Theta)$+ 样本信息$X$=&gt; 后验分布$\Pi(\Theta|X)$</p></blockquote><h3 id="（2）概率公式"><a href="#（2）概率公式" class="headerlink" title="（2）概率公式"></a>（2）概率公式</h3><h5 id="2-1）条件概率"><a href="#2-1）条件概率" class="headerlink" title="2.1）条件概率"></a>2.1）条件概率</h5><p>  设A,B是两个事件，且P(B)&gt;0,则在事件B发生的条件下，事件A发生的条件概率（conditional probability)为：</p><blockquote><p> P(A|B)=P(AB)/P(B)</p></blockquote><p>例如：<br> ① 扔骰子，扔出的点数介于[1,3]称为事件A，扔出的点数介于[2,5]称为事件B，问：B已经发生的条件下，A发生的概率是多少？<br>也即，做一次实验时，即有可能仅发生A，也有可能仅发生B，也有可能AB同时发生；<br><img src="https://img-blog.csdnimg.cn/2018120917054312.png" alt="条件概率"></p><h6 id="（2-2）联合概率"><a href="#（2-2）联合概率" class="headerlink" title="（2.2）联合概率"></a>（2.2）联合概率</h6><p>联合概率表示两个事件共同发生的概率。A与B的联合概率表示$P(A∩B)$或者$P(A,B)$。</p><h6 id="2-3-边缘概率"><a href="#2-3-边缘概率" class="headerlink" title="(2.3) 边缘概率"></a>(2.3) 边缘概率</h6><p>边缘概率（又称先验概率）是某个事件发生的概率。边缘概率是这样得到的：在联合概率中，把最终结果中那些不需要的事件通过合并成它们的全概率，而消去它们（对离散随机变量用求和得全概率，对连续随机变量用积分得全概率），这称为边缘化（marginalization），比如A的边缘概率表示为P(A)，B的边缘概率表示为P(B)。</p><h6 id="（2-4）贝叶斯公式"><a href="#（2-4）贝叶斯公式" class="headerlink" title="（2.4）贝叶斯公式"></a>（2.4）贝叶斯公式</h6><p>紧接着考虑一个问题：P(A|B)是在B发生的情况下A发生的可能性。</p><blockquote><p>首先，事件B发生之前，我们对事件A的发生有一个基本的概率判断，称为A的先验概率，用P(A)表示；<br>其次，事件B发生之后，我们对事件A的发生概率重新评估，称为A的后验概率，用P(A|B)表示；<br>类似的，事件A发生之前，我们对事件B的发生有一个基本的概率判断，称为B的先验概率，用P(B)表示；<br>同样，事件A发生之后，我们对事件B的发生概率重新评估，称为B的后验概率，用P(B|A)表示。<br><img src="https://img-blog.csdnimg.cn/20181209175535173.png" alt="在这里插入图片描述"></p></blockquote><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>以我们常用的搜索引擎当你不小心输入一个不存在的单词时，搜索引擎会提示你是不是要输入某一个正确的单词，比如当你在Google中输入“happu”时，系统会猜测你的意图：是不是要搜索“happy”，如下图所示：<br><img src="https://img-blog.csdnimg.cn/2018120917574786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p6Z2hhc3Rpbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">这便是拼写检查。吴军博士的<a href="https://u14147674.ctfile.com/fs/14147674-236633527" target="_blank" rel="noopener">《数学之美》</a>，Google的拼写检查基于贝叶斯方法。下面以此为例贝叶斯方法，实现”拼写检查”的功能。</p><blockquote><p>  用户输入一个单词时，可能拼写正确，也可能拼写错误。如果把拼写正确的情况记做c（代表correct），拼写错误的情况记做w（代表wrong），那么”拼写检查”要做的事情就是：在发生w的情况下，试图推断出c。换言之：已知w，然后在若干个备选方案中，找出可能性最大的那个c，也就是求的$P(c|w)$最大值。</p></blockquote><p>   根据贝叶斯定理，有：$$<br>p(C|W)=\frac{(P(W|C))(P(C))}{P(W)}<br>$$<br> 由于对所有备选的c来说，对应的都是同一个w，所以它们的P(w)是相同的，因此我们只要最大化 $(P(W|C))(P(C))$<br>即可。其中：</p><blockquote><p>$P(c)$表示某个正确的词的出现”概率”，它可以用”频率”代替。如果我们有一个足够大的文本库，那么这个文本库中每个单词的出现频率，就相当于它的发生概率。某个词的出现频率越高，P(c)就越大。比如在你输入一个错误的词“Julw”时，系统更倾向于去猜测你可能想输入的词是“July”，而不是“Jult”，因为“July”更常见。<br>P(w|c)表示在试图拼写c的情况下，出现拼写错误w的概率。为了简化问题，假定两个单词在字形上越接近，就有越可能拼错，P(w|c)就越大。举例来说，相差一个字母的拼法，就比相差两个字母的拼法，发生概率更高。你想拼写单词July，那么错误拼成Julw（相差一个字母）的可能性，就比拼成Jullw高（相差两个字母）。值得一提的是，一般把这种问题称为“编辑距离”<br>    所以，我们比较所有拼写相近的词在文本库中的出现频率，再从中挑出出现频率最高的一个，即是用户最想输入的那个词。</p></blockquote><p>==<strong>介绍尚未结束 欲知详情请听下回分说</strong>==</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   最近真的是离不开贝叶斯这个科学牛人，他的理论至今仍对科学研究有着极大的影响，所以自己在兴趣与学业的双重&lt;del&gt;感知&lt;/del&gt;(鸭梨)下毅然而然的决定要加深自己对贝叶斯理论的了解，奈何知识点太多而自己目前的了解有限，所以&lt;code&gt;本章主要讲述基本的公式，算法思想和场景&lt;/code&gt;更多具体而生动的内容咱们下文再续。话不多说让我们一睹为快！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BTW,若观点错误或者引用侵权的欢迎指正交流。
    
    </summary>
    
      <category term="Technical learning" scheme="http://yoursite.com/categories/Technical-learning/"/>
    
    
      <category term="Technical log" scheme="http://yoursite.com/tags/Technical-log/"/>
    
      <category term="Bayesian theory" scheme="http://yoursite.com/tags/Bayesian-theory/"/>
    
  </entry>
  
  <entry>
    <title>阅《风中有朵雨做的云》感悟</title>
    <link href="http://yoursite.com/2019/06/16/%E9%A3%8E%E4%B8%8E%E4%BA%91/"/>
    <id>http://yoursite.com/2019/06/16/风与云/</id>
    <published>2019-06-16T02:40:12.000Z</published>
    <updated>2019-04-16T01:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.dazui.com/CKUpload/images/201902/p2547759924.jpg" alt><a id="more"></a> </p><p>其实于我而言，风雨云这部电影</p><p>是和<strong>《我不是药神》</strong>一样重量级的影片；</p><p>感谢娄烨导演，镜头从<strong>拆迁闹事</strong>开始，展出一幅幅真实·震撼的生活百景图；</p><p>让坐在实验室里，每天三点一线的我，能更切身的体会到‘’外面世界‘’的不易；</p><p>看完电影之后百感滋味在心头，当我们遇到人生起伏是是非非，很多决策与用意已经不能仅仅以<strong>善恶</strong>来评判；</p><p>不了解林慧，她欺骗感情婚内出轨，是个十恶不赦的<strong>渣女</strong>，误杀情敌阿云，包庇女儿自愿入狱，甚至愿意为不相干的家栋以命博姜紫成；</p><p>不了解唐奕杰，他贪赃枉法一手遮天，置百姓利益于不顾，是个彻头彻尾的<strong>贪官</strong>污吏，但是年少时期单纯青涩，向往爱情却求而不得，照顾小诺视如己出；</p><p>不了解姜紫成，他表面浪荡不羁，声色犬马，在杀人不眨眼的商界步步为营，为达目的不择手段，是个纯24K的<strong>奸商</strong>，欺骗阿云却又钟情林慧，或许他感情一直从一，除林慧外皆可抛，却又爱惜小诺，似乎尚存一丝人性；</p><p>不了解家栋，影片上演的是忍辱负重，未查出伤父真相小心谨慎，却又极易受人牵绊，自损八百。明明对小诺有情但更也仅此为止，尊乎警队<strong>法律</strong>，却又沉冤得雪后辞职，迷雾重重；</p><p>不了解小诺，外表是游手好闲的富家女孩，一面爱护亲人，对姜叔和母亲的感情心知肚明，却对养护多年的法律意义“父亲”监护人唐主任凶残<strong>杀害</strong>，不明亲情又向往得到家栋爱情，似乎想要走出浑水却早已越陷越深；</p><p>或许正如所言：<strong>社会是风，欲望是雨，我们是云</strong></p><p>最后推荐影片中饰演唐奕杰演员的回答-&gt;<a href="https://www.zhihu.com/question/52513222/answer/644839772" target="_blank" rel="noopener">如何评价电影《风中有朵雨做的云》？</a>简直是本年度最佳番外！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.dazui.com/CKUpload/images/201902/p2547759924.jpg&quot; alt&gt;
    
    </summary>
    
      <category term="Life perception" scheme="http://yoursite.com/categories/Life-perception/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
